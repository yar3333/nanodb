package generator;

import php.Exception;
import php.Global;
import orm.Db;
import php.SuperGlobal;
import php.Syntax;
import php.TypedArray;
using php.StringToolsNative;

class Main 
{
	static function main()
	{
		Log.instance.depthLimit = 2;
		
		var args : TypedArray<String> = SuperGlobal.GLOBALS["argv"];
		args = args.slice(1);
		
		var options = new CmdOptions();
		
		options.add("databaseConnectionString", "", null,
			"Database connecting string like 'mysql://<user>:<password>@<host>/<database_name>'."
		);
		
		options.add("autogeneratedNamespace", "models\\autogenerated", Syntax.arrayDecl("-a", "--autogenerated-namespace"),
			  "Namespace for autogenerated classes.\n"
			+ "Default is 'models.autogenerated'."
		);
		
		options.add("customNamespace", "models", Syntax.arrayDecl("-c", "--custom-namespace"),
			  "Namespace for your custom classes.\n"
			+ "Default is 'models'."
		);
		
		options.add("outPath", "", Syntax.arrayDecl("-o", "--out-path"),
			  "This is a base directory path for generated files."
		);
		
		options.addRepeatable("ignoreTables", "string", Syntax.arrayDecl("-i", "--ignore-table"),
			  "Table name to ignore."
		);
		
		options.addRepeatable("noInstantiateManagers", "string", Syntax.arrayDecl("-nim", "--no-instantiate-manager"),
			  "Table name to skip manager creating in autogenerated Orm class.\n"
			+ "You can use this switch for your managers with a custom constructors.\n"
			+ "In this case you must instantiate these managers manually\n"
			+ "(in regular case - in your custom Orm constructor)."
		);
		
		options.addRepeatable("positions", "string", Syntax.arrayDecl("-pf", "--position-field"),
			  "Field name treated as record number (1, 2, 3, ...).\n"
			+ "Values of such fields will be autocalculated on records creating.\n"
			+ "Can be specified in next forms:\n"
			+ "\t`field` or `*.field` - to specify fields in any table;\n"
			+ "\t`table.field` - to specify field in specified table only.\n"
			+ "Default is `position`."
		);
		
		options.parse(args);
        
		if (args.length > 0)
		{
			//try
			//{
				var outPath = options.get("outPath");
				
				var databaseConnectionString = options.get("databaseConnectionString");
				if (databaseConnectionString != "")
				{
					Log.start("Generate object related mapping classes");
					
					var positions : TypedArray<String> = options.get("positions");
					if (positions.length == 0) positions = Syntax.arrayDecl("position");
					
					new OrmGenerator(outPath).generate
					(
						new Db(databaseConnectionString),
						(cast options.get("autogeneratedNamespace") : String).ltrim("\\").replace("\\", "."),
						(cast options.get("customNamespace") : String).ltrim("\\").replace("\\", "."),
						(cast options.get("ignoreTables") : TypedArray<String>),
						(cast options.get("noInstantiateManagers") : TypedArray<String>),
						new OrmPositions(positions)
					);
					
					Log.finishSuccess();
				}
				else
				{
					fail("Database connection string must be specified.");
				}
					
			//}
			//catch (e:Exception)
			//{
			//	Log.echo(e.getMessage());
			//	fail();
			//}
        }
		else
		{
			
			Global.echo("Generating set of the php classes from database tables.\n");
			Global.echo("\nUsage:\n\tbin\\nanodb <databaseConnectionString> [options]\n");
			Global.echo("\nOptions:\n\n");
			Global.echo(options.getHelpMessage() + "\n");
		}
        
        Sys.exit(0);
	}
	
	static function fail(?message:String)
	{
		if (message != null)
		{
			Global.echo("ERROR: " + message + "\n");
		}
		Sys.exit(1);
	}
}