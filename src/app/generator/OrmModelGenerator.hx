package generator;

import orm.Db;
import php.Global;
import php.TypedArray;
import php.Syntax;
using php.StringToolsNative;

class OrmModelGenerator 
{
	public function new() {}
	
	public function make(db:Db, table:OrmTable, customOrmClassName:String, srcPath:String, positions:OrmPositions) : Void
	{
		Log.start(table.tableName + " => " + table.customModelClassName);
		
		var vars = OrmTools.fields2vars(table.tableName, db.connection.getFields(table.tableName), positions);
		
		var autogenModel = getAutogenModel(table.tableName, vars, table.autogenModelClassName, customOrmClassName);
		Global.echo("\n\nsrcPath = " + srcPath + "\n\n");
		Global.echo("\n\ntable.autogenModelClassName: " + table.autogenModelClassName + "\n\n");
		var destFileName = srcPath + table.autogenModelClassName.replace(".", "/") + ".hx";
		Global.echo("\n\nCREATE DIR: " + destFileName + "\n\n");
		Tools.mkdir(Global.dirname(destFileName));
		Global.file_put_contents(
			  destFileName
			, "// This is autogenerated file. Do not edit!\n\n" + autogenModel.toString()
		);
		
		if (!Global.file_exists(srcPath + "/" + table.customModelClassName.replace(".", "/") + ".hx")) 
		{
			var customModel = getCustomModel(table.customModelClassName, table.autogenModelClassName);
			var destFileName = srcPath + table.customModelClassName.replace(".", "/") + ".hx";
			Tools.mkdir(Global.dirname(destFileName));
			Global.file_put_contents(destFileName, customModel.toString());
		}
		
		Log.finishSuccess();
	}
	
	function getAutogenModel(table:String, vars:TypedArray<OrmPhpVar>, modelClassName:String, customOrmClassName:String) : PhpClass
	{
		var model = new PhpClass(modelClassName);
		
		model.addVar({ haxeName:"db", haxeType:"orm.Db", haxeDefVal:null }, true);
		model.addVar({ haxeName:"orm", haxeType:customOrmClassName, haxeDefVal:null }, true);
		
		Syntax.foreach(vars, function(_, v:OrmPhpVar)
		{
			model.addVar(v);
		});
		
		model.addMethod(
			  "new"
			, Syntax.arrayDecl(
				  { haxeName:"db", haxeType:"orm.Db", haxeDefVal:null }
				, { haxeName:"orm", haxeType:customOrmClassName, haxeDefVal:null } 
			  )
			, "Void"
			, "this.db = db;\nthis.orm = orm;"
		);
        
        if (vars.exists(function(v) return v.isKey) && vars.exists(function(v) return !v.isKey))
		{
			var settedVars = vars.filter(function(v) return !v.isKey && !v.isAutoInc);
			if (settedVars.length > 0)
			{
				model.addMethod("set", settedVars, "Void",
					settedVars.map(function(v) return "this." + v.haxeName + " = " + v.haxeName + ";").join("\n")
				);
			}
			
			var savedVars = vars.filter(function(v) return !v.isKey);
			var whereVars = vars.filter(function(v) return v.isKey);
			model.addMethod("save", new TypedArray<OrmPhpVar>(), "Void",
				  "db.query(\n"
				    + "\t 'UPDATE `" + table + "` SET '\n"
					+ "\t\t+  '" + savedVars.map(function(v) return "`" + v.name + "` = ' + db.quote(" + v.haxeName + ")").join("\n\t\t+', ")
					+ "\n\t+' WHERE " 
					+ whereVars.map(function(v) return "`" + v.name + "` = ' + db.quote(" + v.haxeName + ")").join("+' AND ")
					+ "\n\t+' LIMIT 1'"
				+ "\n);"
			);
		}
		
		return model;
	}

	function getCustomModel(customModelClassName:String, autogenModelClassName:String) : PhpClass
	{
		return new PhpClass(customModelClassName, autogenModelClassName);
	}
}