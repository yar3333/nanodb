package generator;

import orm.Db;
import php.Global;
import php.TypedArray;
import php.Syntax;
using php.StringToolsNative;

class OrmModelGenerator 
{
	public function new() {}
	
	public function make(db:Db, table:OrmTable, customOrmClassName:String, outPath:String, positions:OrmPositions, customEntityClassName:String) : Void
	{
		Log.start(table.tableName + " => " + table.customModelClassName);
		
		var vars = OrmTools.fields2vars(table.tableName, db.connection.getFields(table.tableName), positions);
		
		var autogeneratedModel = getAutogenModel(table.tableName, vars, table.autogeneratedModelClassName, customOrmClassName, customEntityClassName);
		var destFileName = outPath + table.autogeneratedModelClassName.replace(".", "/") + ".php";
		Tools.mkdir(Global.dirname(destFileName));
		Global.file_put_contents(destFileName, autogeneratedModel.toString());
		
		if (!Global.file_exists(outPath + "/" + table.customModelClassName.replace(".", "/") + ".php")) 
		{
			var customModel = getCustomModel(table.customModelClassName, table.autogeneratedModelClassName);
			var destFileName = outPath + table.customModelClassName.replace(".", "/") + ".php";
			Tools.mkdir(Global.dirname(destFileName));
			Global.file_put_contents(destFileName, customModel.toString());
		}
		
		Log.finishSuccess();
	}
	
	function getAutogenModel(table:String, vars:TypedArray<OrmPhpVar>, modelClassName:String, customOrmClassName:String, customEntityClassName:String) : PhpClass
	{
		var klass = new PhpClass(modelClassName, customEntityClassName);
		
		klass.addGlobalComment("// This file is autogenerated. Do not edit!");
		
		Syntax.foreach(vars, function(_, v:OrmPhpVar)
		{
			klass.addVar(v);
		});
		
		return klass;
	}

	function getCustomModel(customModelClassName:String, autogeneratedModelClassName:String) : PhpClass
	{
		return new PhpClass(customModelClassName, autogeneratedModelClassName);
	}
}