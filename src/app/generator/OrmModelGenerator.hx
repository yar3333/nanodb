package generator;

import orm.Db;
import php.Global;
import php.TypedArray;
import php.Syntax;
using php.StringToolsNative;

class OrmModelGenerator 
{
	public function new() {}
	
	public function make(db:Db, table:OrmTable, customOrmClassName:String, outPath:String, positions:OrmPositions, customEntityClassName:String) : Void
	{
		Log.start(table.tableName + " => " + table.customModelClassName);
		
		var vars = OrmTools.fields2vars(table.tableName, db.connection.getFields(table.tableName), positions);
		
		var autogeneratedModel = getAutogenModel(table.tableName, vars, table.autogeneratedModelClassName, customOrmClassName, customEntityClassName);
		var destFileName = outPath + table.autogeneratedModelClassName.replace(".", "/") + ".php";
		Tools.mkdir(Global.dirname(destFileName));
		Global.file_put_contents(destFileName, autogeneratedModel.toString());
		
		if (!Global.file_exists(outPath + "/" + table.customModelClassName.replace(".", "/") + ".php")) 
		{
			var customModel = getCustomModel(table.customModelClassName, table.autogeneratedModelClassName);
			var destFileName = outPath + table.customModelClassName.replace(".", "/") + ".php";
			Tools.mkdir(Global.dirname(destFileName));
			Global.file_put_contents(destFileName, customModel.toString());
		}
		
		Log.finishSuccess();
	}
	
	function getAutogenModel(table:String, vars:TypedArray<OrmPhpVar>, modelClassName:String, customOrmClassName:String, customEntityClassName:String) : PhpClass
	{
		var klass = new PhpClass(modelClassName, customEntityClassName);
		
		klass.addComment("// This file is autogenerated. Do not edit!");
		
		Syntax.foreach(vars, function(_, v:OrmPhpVar)
		{
			klass.addVar(v);
		});
		
		klass.addMethod(
			  "__construct"
			, Syntax.arrayDecl(
				new PhpVar("db", Tools.toPhpType("nanodb.orm.Db")),
				new PhpVar("orm", Tools.toPhpType(customOrmClassName)),
				new PhpVar("serializer", Tools.toPhpType("nanodb.orm.ISerializer"))
			  )
			, null
			, "$this->db = $db;\n$this->orm = $orm;\n$this->serializer = $serializer;"
		);
        
        if (vars.exists(function(v) return v.isKey) && vars.exists(function(v) return !v.isKey))
		{
			var settedVars = vars.filter(function(v) return !v.isKey && !v.isAutoInc);
			if (settedVars.length > 0)
			{
				klass.addMethod(
					"set",
					cast settedVars,
					"void",
					settedVars.map(function(v) return "$this->" + v.haxeName + " = $" + v.haxeName + ";").join("\n")
				);
			}
			
			var savedVars = vars.filter(function(v) return !v.isKey);
			var whereVars = vars.filter(function(v) return v.isKey);
			klass.addMethod(
				"save",
				Syntax.arrayDecl(),
				"void",
				  "$data = $this->serializer->serializeObject($this, [ " + savedVars.map(function(x) return "'" + x.name + "'").join(", ") + " ]);\n"
				+ "$sets = []; foreach ($data as $k => $v) $sets[] = \"`$k` = \" . $this->db->quote($v);\n"
				+ "\n"
				+ "$keys = $this->serializer->serializeObject($this, [ " + whereVars.map(function(x) return "'" + x.name + "'").join(", ") + " ]);\n"
				+ "$wheres = []; foreach ($keys as $k => $v) $wheres[] = \"`$k` = \" . $this->db->quote($v);\n"
				+ "\n"
				+ "$this->db->query(\n"
				    + "\t 'UPDATE `" + table + "` SET ' . implode(', ', $sets) . ' WHERE ' . implode(' AND ', $wheres) . ' LIMIT 1'"
				+ "\n);"
			);
		}
		
		return klass;
	}
	
	function addCastFromDbMethod(klass:PhpClass, v:OrmPhpVar, destCastPhpType:String) : Void
	{
		klass.addMethod
		(
			v.haxeName + "__fromDb",
			Syntax.arrayDecl(new PhpVar("data", "array")),
			null, 
			"$this->" + v.name + " = $data['" + v.name + "'] !== null ? (" + destCastPhpType + ")$data['" + v.name + "'] : null;",
			"protected"
		);
	}

	function getCustomModel(customModelClassName:String, autogeneratedModelClassName:String) : PhpClass
	{
		return new PhpClass(customModelClassName, autogeneratedModelClassName);
	}
}