package generator;

import orm.Db;
import php.Global;
import php.Syntax;
import php.TypedArray;
using php.StringToolsNative;

class OrmQueryGenerator 
{
	public function new() {}
	
	public function make(db:Db, table:OrmTable, customOrmClassName:String, outPath:String, positions:OrmPositions) : Void
	{
		Log.start(table.tableName + " => " + table.queryClassName);
		
		var vars = OrmTools.fields2vars(table.tableName, db.connection.getFields(table.tableName), positions);
		
		var queryClass = getQueryClass(db, table.tableName, vars, table.customModelClassName, table.queryClassName, positions);
		var destFileName = outPath + table.queryClassName.replace('.', '/') + '.php';
		Tools.mkdir(Global.dirname(destFileName));
		Global.file_put_contents(destFileName, queryClass.toString());
		
		Log.finishSuccess();
	}
	
	function getQueryClass(db:Db, table:String, vars:TypedArray<OrmPhpVar>, modelClassName:String, queryClassName:String, positions:OrmPositions) : PhpClass
	{
		var klass = new PhpClass(queryClassName, "nanodb.orm.DbQuery");
		
		klass.addGlobalComment("// This file is autogenerated. Do not edit!");
		
		klass.addClassComment(
			  "/**\n"
			+ " * @method " + Tools.toPhpType(modelClassName) + "[] findMany\n"
			+ " * @method " + Tools.toPhpType(modelClassName) + " findOne\n"
			+ " * @method " + Tools.toPhpType(queryClassName) + " whereField(string $field, string $op, $value)\n"
			+ " * @method " + Tools.toPhpType(queryClassName) + " where(string $rawSqlText, array $params=null)\n"
			+ " * @method " + Tools.toPhpType(queryClassName) + " orderDesc(int $rawSqlText)\n"
			+ " * @method " + Tools.toPhpType(queryClassName) + " orderAsc(int $rawSqlText)\n"
			+ " * @method " + Tools.toPhpType(queryClassName) + " skip(int $skip)\n"
			+ " * @method " + Tools.toPhpType(queryClassName) + " limit(int $limit)\n"
			+ " */"
		);
		
		klass.addVar(new PhpVar("table", null, '"' + table + '"'), "protected");
        
		klass.addMethod
		(
			'newFromDbRow',
			Syntax.arrayDecl(new PhpVar("row", "array")),
			Tools.toPhpType(modelClassName),
			   "$obj = new " + Tools.toPhpType(modelClassName) + "();\n"
			 + "$this->serializer->deserializeObject($row, $obj, [ " + vars.map(function(x) return "'" + x.haxeName + "'").join(", ") + " ]);\n"
			 + "return $obj;",
			"protected"
		);
		
		return klass;
	}
}