<?php

namespace nanodb\generator;

class OrmTable
{
	/**
	 * @var string
	 */
	public $autogeneratedManagerClassName;

	/**
	 * @var string
	 */
	public $autogeneratedModelClassName;

	/**
	 * @var string
	 */
	public $customManagerClassName;

	/**
	 * @var string
	 */
	public $customModelClassName;

	/**
	 * @var string
	 */
	public $queryClassName;

	/**
	 * @var string
	 */
	public $tableName;

	/**
	 * @var string
	 */
	public $varName;

	/**
	 * @param string $tableName
	 * @param string $autogeneratedNamespace
	 * @param string $customNamespace
	 * @return void
	 */
	public function __construct($tableName, $autogeneratedNamespace, $customNamespace)
    {
		$this->tableName = $tableName;
		$this->varName = $this->getVarName();
		$className = Tools::pluralToSingular($this->getClassName());
		$this->autogeneratedManagerClassName = $autogeneratedNamespace . '.' . $className . 'Manager';
		$this->customManagerClassName = $customNamespace . '.' . $className . 'Manager';
		$this->autogeneratedModelClassName = $autogeneratedNamespace . '.' . $className;
		$this->customModelClassName = $customNamespace . '.' . $className;
		$this->queryClassName = $autogeneratedNamespace . '.' . $className . 'Query';
	}

	/**
	 * @return string
	 */
	public function getClassName()
    {
		$s = '';
		$packs = explode('__', mb_strtolower($this->tableName));
        if ($packs) {
            while (\count($packs) > 1) {
                $pack = array_shift($packs);
                $words = explode('_', $pack);
                $s .= array_shift($words);
                $s .= implode('', array_map(static function ($x) {
                    return Tools::capitalize($x);
                }, $words));
                $s .= '.';
            }
            $s .= implode('', array_map(static function ($x1) {
                return Tools::capitalize($x1);
            }, explode('_', $packs[0])));
        }
		return $s;
	}

	/**
	 * @return string
	 */
	public function getVarName()
    {
		$s = '';
		$packs = explode('__', mb_strtolower($this->tableName));
        if ($packs) {
            while (\count($packs) > 1) {
                $pack = array_shift($packs);
                $words = explode('_', $pack);
                $s .= array_shift($words);
                $s .= implode('', array_map(static function ($v) {
                    return Tools::capitalize($v);
                }, $words));
                $s .= '_';
            }
            $parts = explode('_', $packs[0]);
            if ($parts) {
                $s1 = implode('', array_map(static function ($w) {
                    return Tools::capitalize($w);
                }, \array_slice($parts, 1, null)));
                $s .= $parts[0] . $s1;
            }
        }
		return $s;
	}
}

