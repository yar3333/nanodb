<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace nanodb\generator;

use \nanodb\EReg;

class Tools {
	/**
	 * @param string $s
	 * 
	 * @return string
	 */
	static public function capitalize ($s) {
		if ($s === "") {
			return $s;
		} else {
			return (mb_strtoupper(mb_substr($s, 0, 1))??'null') . (mb_substr($s, 1, null)??'null');
		}
	}

	/**
	 * @param string $field
	 * 
	 * @return string
	 */
	static public function fieldAsFunctionNamePart ($field) {
		return Tools::capitalize((new EReg("_[a-z]", "g"))->map($field, function ($re) {
			return mb_strtoupper(mb_substr($re->matched(0), 1, null));
		}));
	}

	/**
	 * @param string $fullClassName
	 * 
	 * @return string
	 */
	static public function getNamespace ($fullClassName) {
		$parts = explode(".", $fullClassName);
		if (count($parts) <= 1) {
			return "";
		}
		return implode(".", array_slice($parts, 0, count($parts) - 1));
	}

	/**
	 * @param string $path
	 * 
	 * @return void
	 */
	static public function mkdir ($path) {
		if (!file_exists($path)) {
			mkdir($path, 511, true);
		}
	}

	/**
	 * @param string $word
	 * 
	 * @return string
	 */
	static public function pluralToSingular ($word) {
		if ($word === "person") {
			return "people";
		}
		if ((substr($word, -mb_strlen("xes")) === "xes") || (substr($word, -mb_strlen("ses")) === "ses") || (substr($word, -mb_strlen("zes")) === "zes") || (substr($word, -mb_strlen("shes")) === "shes") || (substr($word, -mb_strlen("ches")) === "ches")) {
			return mb_substr($word, 0, mb_strlen($word) - 2);
		}
		if (substr($word, -mb_strlen("ies")) === "ies") {
			return (mb_substr($word, 0, mb_strlen($word) - 3)??'null') . "y";
		}
		if (substr($word, -mb_strlen("s")) === "s") {
			return mb_substr($word, 0, mb_strlen($word) - 1);
		}
		return $word;
	}

	/**
	 * @param string $longType
	 * @param bool $fromRoot
	 * 
	 * @return string
	 */
	static public function toPhpType ($longType, $fromRoot = true) {
		if ($fromRoot === null) {
			$fromRoot = true;
		}
		return ((($fromRoot ? "\\" : ""))??'null') . (str_replace(".", "\\", $longType)??'null');
	}
}

