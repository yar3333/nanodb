<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace nanodb\generator;

use \nanodb\php\Boot;
use \nanodb\generator\OrmPhpVar as GeneratorOrmPhpVar;
use \nanodb\orm\DbTableFieldData;
use \nanodb\EReg;
use \nanodb\generator\OrmPositions as GeneratorOrmPositions;

class OrmTools {
	/**
	 * @param string $table
	 * @param DbTableFieldData $f
	 * @param GeneratorOrmPositions $positions
	 * 
	 * @return GeneratorOrmPhpVar
	 */
	static public function field2var ($table, $f, $positions) {
		$f1 = $f->name;
		$r = OrmTools::sqlType2phpType($f->type);
		$r1 = new GeneratorOrmPhpVar($f1, $r, ($positions->is($table, $f->name) ? "null" : null));
		$r1->table = $table;
		$r1->name = $f->name;
		$r1->type = $f->type;
		$r1->isNull = $f->isNull;
		$r1->isKey = $f->isKey;
		$r1->isAutoInc = $f->isAutoInc;
		return $r1;
	}

	/**
	 * @param string $table
	 * @param mixed $fields
	 * @param GeneratorOrmPositions $positions
	 * 
	 * @return mixed
	 */
	static public function fields2vars ($table, $fields, $positions) {
		return array_map(function ($x)  use (&$table, &$positions) {
			return OrmTools::field2var($table, $x, $positions);
		}, $fields);
	}

	/**
	 * @param string $sqlType
	 * 
	 * @return string
	 */
	static public function sqlType2phpType ($sqlType) {
		$sqlType = mb_strtoupper($sqlType);
		if ($sqlType === "TINYINT(1)") {
			return "bool";
		}
		if (OrmTools::sqlTypeCheck($sqlType, "TINYINT")) {
			return "int";
		}
		if (OrmTools::sqlTypeCheck($sqlType, "SMALLINT")) {
			return "int";
		}
		if (OrmTools::sqlTypeCheck($sqlType, "MEDIUMINT")) {
			return "int";
		}
		if (OrmTools::sqlTypeCheck($sqlType, "SHORT")) {
			return "int";
		}
		if (OrmTools::sqlTypeCheck($sqlType, "LONG")) {
			return "int";
		}
		if (OrmTools::sqlTypeCheck($sqlType, "INT")) {
			return "int";
		}
		if (OrmTools::sqlTypeCheck($sqlType, "INTEGER")) {
			return "int";
		}
		if (OrmTools::sqlTypeCheck($sqlType, "INT24")) {
			return "int";
		}
		if (OrmTools::sqlTypeCheck($sqlType, "BIGINT")) {
			return "float";
		}
		if (OrmTools::sqlTypeCheck($sqlType, "LONGLONG")) {
			return "float";
		}
		if (OrmTools::sqlTypeCheck($sqlType, "DECIMAL")) {
			return "float";
		}
		if (OrmTools::sqlTypeCheck($sqlType, "FLOAT")) {
			return "float";
		}
		if (OrmTools::sqlTypeCheck($sqlType, "DOUBLE")) {
			return "float";
		}
		if (OrmTools::sqlTypeCheck($sqlType, "REAL")) {
			return "float";
		}
		if (OrmTools::sqlTypeCheck($sqlType, "DATE")) {
			return "DateTime";
		}
		if (OrmTools::sqlTypeCheck($sqlType, "DATETIME")) {
			return "DateTime";
		}
		return "string";
	}

	/**
	 * @param string $checked
	 * @param string $type
	 * 
	 * @return bool
	 */
	static public function sqlTypeCheck ($checked, $type) {
		$re = new EReg("^" . $type . "(\\(|\$)", "");
		return $re->match($checked);
	}
}

Boot::registerClass(OrmTools::class, 'generator.OrmTools');
