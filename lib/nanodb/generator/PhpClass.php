<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace nanodb\generator;

use \nanodb\php\_Boot\HxAnon;
use \nanodb\php\Boot;
use \nanodb\php\_Boot\HxString;

class PhpClass {
	/**
	 * @var string
	 */
	public $baseFullClassName;
	/**
	 * @var mixed
	 */
	public $customs;
	/**
	 * @var string
	 */
	public $fullClassName;
	/**
	 * @var mixed
	 */
	public $imports;
	/**
	 * @var mixed
	 */
	public $methods;
	/**
	 * @var mixed
	 */
	public $vars;

	/**
	 * @param string $fullClassName
	 * @param string $baseFullClassName
	 * 
	 * @return void
	 */
	public function __construct ($fullClassName, $baseFullClassName = null) {
		$this->fullClassName = $fullClassName;
		$this->baseFullClassName = $baseFullClassName;
		$this1 = [];
		$this->imports = $this1;
		$this2 = [];
		$this->vars = $this2;
		$this3 = [];
		$this->methods = $this3;
		$this4 = [];
		$this->customs = $this4;
	}

	/**
	 * @param string $code
	 * 
	 * @return void
	 */
	public function addCustom ($code) {
		array_push($this->customs, $code);
	}

	/**
	 * @param string $packageName
	 * 
	 * @return void
	 */
	public function addImport ($packageName) {
		array_push($this->imports, "import " . ($packageName??'null') . ";");
	}

	/**
	 * @param string $name
	 * @param mixed $vars
	 * @param string $retType
	 * @param string $body
	 * @param bool $isPrivate
	 * @param bool $isStatic
	 * 
	 * @return void
	 */
	public function addMethod ($name, $vars, $retType, $body, $isPrivate = false, $isStatic = false) {
		if ($isPrivate === null) {
			$isPrivate = false;
		}
		if ($isStatic === null) {
			$isStatic = false;
		}
		$header = ((($isPrivate ? "" : "public "))??'null') . ((($isStatic ? "static  " : ""))??'null') . "function " . $name . "(" . (implode(", ", array_map(function ($v) {
			return ($v->haxeName??'null') . ":" . ($v->haxeType??'null') . ((($v->haxeDefVal !== null ? "=" . ($v->haxeDefVal??'null') : ""))??'null');
		}, $vars))??'null') . ") : " . ($retType??'null');
		$s = $header . "\x0A" . "\x09{\x0A" . ($this->indent(trim($body, null), "\x09\x09")??'null') . "\x0A" . "\x09}";
		array_push($this->methods, $s);
	}

	/**
	 * @param object $v
	 * @param bool $isPrivate
	 * @param bool $isStatic
	 * @param bool $isReadOnlyProperty
	 * @param mixed $allows
	 * 
	 * @return void
	 */
	public function addVar ($v, $isPrivate = false, $isStatic = false, $isReadOnlyProperty = false, $allows = null) {
		if ($isPrivate === null) {
			$isPrivate = false;
		}
		if ($isStatic === null) {
			$isStatic = false;
		}
		if ($isReadOnlyProperty === null) {
			$isReadOnlyProperty = false;
		}
		if ($v !== null) {
			$s = (((($allows !== null) && (count($allows) > 0) ? implode("", array_map(function ($s1) {
				return "@:allow(" . $s1 . ")\x0A";
			}, $allows)) : ""))??'null') . ((($isPrivate ? "" : "public "))??'null') . ((($isStatic ? "static " : ""))??'null') . "var " . ($v->haxeName??'null') . ((($isReadOnlyProperty ? "(default, null)" : ""))??'null') . " : " . ($v->haxeType??'null') . ";";
			array_push($this->vars, $s);
		} else {
			array_push($this->vars, "");
		}
	}

	/**
	 * @param object $v
	 * @param bool $isPrivate
	 * @param bool $isStatic
	 * @param bool $isInline
	 * 
	 * @return void
	 */
	public function addVarGetter ($v, $isPrivate = false, $isStatic = false, $isInline = false) {
		if ($isPrivate === null) {
			$isPrivate = false;
		}
		if ($isStatic === null) {
			$isStatic = false;
		}
		if ($isInline === null) {
			$isInline = false;
		}
		$s = "\x0A\x09" . ((($isPrivate ? "" : "public "))??'null') . ((($isStatic ? "static " : ""))??'null') . "var " . ($v->haxeName??'null') . "(" . ($v->haxeName??'null') . "_getter, null)" . " : " . ($v->haxeType??'null') . ";\x0A";
		$s = $s . ((($isInline ? "\x09inline " : "\x09"))??'null') . "function " . ($v->haxeName??'null') . "_getter() : " . ($v->haxeType??'null') . "\x0A" . "\x09{\x0A" . ($this->indent(trim($v->haxeBody, null), "\x09\x09")??'null') . "\x0A" . "\x09}";
		array_push($this->vars, $s);
	}

	/**
	 * @param string $text
	 * @param string $ind
	 * 
	 * @return string
	 */
	public function indent ($text, $ind = "\x09") {
		if ($ind === null) {
			$ind = "\x09";
		}
		if ($text === "") {
			return "";
		}
		return $ind . (str_replace("\x0A", "\x0A" . $ind, $text)??'null');
	}

	/**
	 * @param string $fullClassName
	 * 
	 * @return object
	 */
	public function splitFullClassName ($fullClassName) {
		$packageName = "";
		$className = $fullClassName;
		if (HxString::lastIndexOf($fullClassName, ".") !== -1) {
			$packageName = mb_substr($fullClassName, 0, HxString::lastIndexOf($fullClassName, "."));
			$className = mb_substr($fullClassName, HxString::lastIndexOf($fullClassName, ".") + 1, null);
		}
		return new HxAnon([
			"packageName" => $packageName,
			"className" => $className,
		]);
	}

	/**
	 * @return string
	 */
	public function toString () {
		$clas = $this->splitFullClassName($this->fullClassName);
		$this1 = [];
		$varLines = $this1;
		$collection = $this->vars;
		foreach ($collection as $key => $value) {
			array_push($varLines, $value->replace("\x0A", "\x0A\x09"));
		}

		$s = "package " . ($clas->packageName??'null') . ";\x0A" . "\x0A" . (implode("\x0A", $this->imports)??'null') . (((count($this->imports) > 0 ? "\x0A\x0A" : ""))??'null') . "class " . ($clas->className??'null') . ((($this->baseFullClassName !== null ? " extends " . ($this->baseFullClassName??'null') : ""))??'null') . "\x0A" . "{\x0A" . (((count($this->vars) > 0 ? "\x09" . (implode("\x0A\x09", $varLines)??'null') . "\x0A\x0A" : ""))??'null') . (((count($this->methods) > 0 ? "\x09" . (implode("\x0A\x0A\x09", $this->methods)??'null') . "\x0A" : ""))??'null') . (((count($this->customs) > 0 ? "\x09" . (implode("\x0A\x0A\x09", $this->customs)??'null') . "\x0A" : ""))??'null') . "}";
		return $s;
	}

	public function __toString() {
		return $this->toString();
	}
}

Boot::registerClass(PhpClass::class, 'generator.PhpClass');
