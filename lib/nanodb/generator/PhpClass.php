<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace nanodb\generator;

use \nanodb\generator\Tools as GeneratorTools;
use \nanodb\generator\PhpVar as GeneratorPhpVar;

class PhpClass {
	/**
	 * @var string
	 */
	public $baseFullClassName;
	/**
	 * @var mixed
	 */
	public $classComments;
	/**
	 * @var mixed
	 */
	public $customs;
	/**
	 * @var string
	 */
	public $fullClassName;
	/**
	 * @var mixed
	 */
	public $globalComments;
	/**
	 * @var mixed
	 */
	public $imports;
	/**
	 * @var mixed
	 */
	public $methods;
	/**
	 * @var mixed
	 */
	public $vars;

	/**
	 * @param string $fullClassName
	 * @param string $baseFullClassName
	 * 
	 * @return void
	 */
	public function __construct ($fullClassName, $baseFullClassName = null) {
		$this->fullClassName = $fullClassName;
		$this->baseFullClassName = $baseFullClassName;
		$this1 = [];
		$this->globalComments = $this1;
		$this2 = [];
		$this->classComments = $this2;
		$this3 = [];
		$this->imports = $this3;
		$this4 = [];
		$this->vars = $this4;
		$this5 = [];
		$this->methods = $this5;
		$this6 = [];
		$this->customs = $this6;
	}

	/**
	 * @param string $text
	 * 
	 * @return void
	 */
	public function addClassComment ($text) {
		array_push($this->classComments, $text);
	}

	/**
	 * @param string $code
	 * 
	 * @return void
	 */
	public function addCustom ($code) {
		array_push($this->customs, $code);
	}

	/**
	 * @param string $text
	 * 
	 * @return void
	 */
	public function addGlobalComment ($text) {
		array_push($this->globalComments, $text);
	}

	/**
	 * @param string $className
	 * 
	 * @return void
	 */
	public function addImport ($className) {
		array_push($this->imports, "use " . GeneratorTools::toPhpType($className) . ";");
	}

	/**
	 * @param string $name
	 * @param mixed $vars
	 * @param string $retType
	 * @param string $body
	 * @param string $access
	 * @param bool $isStatic
	 * 
	 * @return void
	 */
	public function addMethod ($name, $vars, $retType, $body, $access = "public", $isStatic = false) {
		if ($access === null) {
			$access = "public";
		}
		if ($isStatic === null) {
			$isStatic = false;
		}
		$_gthis = $this;
		$header = $this->getMethodComment($vars, $retType) . (($access . " ")??'null') . ((($isStatic ? "static " : ""))??'null') . "function " . $name . "(" . (implode(", ", array_map(function ($v)  use (&$_gthis) {
			return ((($v->haxeType !== null ? $_gthis->renderPhpType($v->haxeType) . " " : ""))??'null') . "\$" . $v->haxeName . ((($v->haxeDefVal !== null ? "=" . $v->haxeDefVal : ""))??'null');
		}, $vars))??'null') . ")" . ((($retType !== null ? " : " . $this->renderPhpType($retType) : ""))??'null');
		$s = $header . (((($body !== null) && (mb_strlen(trim($body, null)) > 0) ? "\n\t{\n" . ($this->indent(trim($body, null), "\t\t")??'null') . "\n\t}" : " {}"))??'null');
		array_push($this->methods, $s);
	}

	/**
	 * @param GeneratorPhpVar $v
	 * @param bool $isStatic
	 * 
	 * @return void
	 */
	public function addProperty ($v, $isStatic = false) {
		if ($isStatic === null) {
			$isStatic = false;
		}
		$this->addVar($v, "protected", $isStatic);
		$this->addMethod("get" . GeneratorTools::capitalize($v->haxeName), [], $v->haxeType, "{ return \$this->" . $v->haxeName . "; }", "public", $isStatic);
		$this->addMethod("set" . GeneratorTools::capitalize($v->haxeName), [new GeneratorPhpVar($v->haxeName, $v->haxeType)], $v->haxeType, "{ \$this->" . $v->haxeName . " = " . $v->haxeName . "; }", "public", $isStatic);
	}

	/**
	 * @param GeneratorPhpVar $v
	 * @param string $access
	 * @param bool $isStatic
	 * 
	 * @return void
	 */
	public function addVar ($v, $access = "public", $isStatic = false) {
		if ($access === null) {
			$access = "public";
		}
		if ($isStatic === null) {
			$isStatic = false;
		}
		if ($v !== null) {
			$s = ((($v->haxeType !== null ? "/**\n * @var " . $this->processPhpDocType($v->haxeType) . "\n */\n" : ""))??'null') . (($access . " ")??'null') . ((($isStatic ? "static " : ""))??'null') . "\$" . $v->haxeName . ((($v->haxeDefVal !== null ? " = " . $v->haxeDefVal : ""))??'null') . ";";
			array_push($this->vars, $s);
		} else {
			array_push($this->vars, "");
		}
	}

	/**
	 * @param mixed $vars
	 * @param string $retType
	 * 
	 * @return string
	 */
	public function getMethodComment ($vars, $retType) {
		if (!current(array_filter($vars, function ($x) {
			return (mb_strpos($x->haxeType, "[]") !== false);
		})) && !(mb_strpos($retType, "[]") !== false)) {
			return "";
		}
		$r = "/**\n";
		$_g = 0;
		while ($_g < count($vars)) {
			$v = $vars[$_g];
			++$_g;
			$r = $r . "\t * @param " . $this->processPhpDocType($v->haxeType) . " \$" . $v->haxeName . "\n";
		}

		$r = $r . "\t * @return " . $this->processPhpDocType($retType) . "\n";
		$r = $r . "\t */\n\t";
		return $r;
	}

	/**
	 * @param string $fullClassName
	 * 
	 * @return string
	 */
	public function getNamespaceName ($fullClassName) {
		if ((mb_strpos($fullClassName, ".") !== false)) {
			return mb_substr($fullClassName, 0, mb_strrpos($fullClassName, "."));
		}
		return "";
	}

	/**
	 * @param string $fullClassName
	 * 
	 * @return string
	 */
	public function getShortClassName ($fullClassName) {
		if ((mb_strpos($fullClassName, ".") !== false)) {
			return mb_substr($fullClassName, mb_strrpos($fullClassName, ".") + 1, null);
		}
		return $fullClassName;
	}

	/**
	 * @param string $text
	 * @param string $ind
	 * 
	 * @return string
	 */
	public function indent ($text, $ind = "\t") {
		if ($ind === null) {
			$ind = "\t";
		}
		if ($text === "") {
			return "";
		}
		return $ind . (str_replace("\n", "\n" . $ind, $text)??'null');
	}

	/**
	 * @param string $type
	 * 
	 * @return string
	 */
	public function processPhpDocType ($type) {
		if ((strpos($type, "?") === 0)) {
			return (mb_substr($type, 1, null)??'null') . "|null";
		}
		return $type;
	}

	/**
	 * @param string $type
	 * 
	 * @return string
	 */
	public function renderPhpType ($type) {
		if ((mb_strpos($type, "[]") !== false)) {
			return "array";
		} else {
			return $type;
		}
	}

	/**
	 * @return string
	 */
	public function toString () {
		$this1 = [];
		$varLines = $this1;
		$collection = $this->vars;
		foreach ($collection as $key => $value) {
			array_push($varLines, str_replace("\n", "\n\t", $value));
		}

		$s = "<?php\n\n" . (implode("\n", $this->globalComments)??'null') . (((count($this->globalComments) > 0 ? "\n\n" : ""))??'null') . "namespace " . (GeneratorTools::toPhpType($this->getNamespaceName($this->fullClassName), false)??'null') . ";\n" . "\n" . (implode("\n", $this->imports)??'null') . (((count($this->imports) > 0 ? "\n\n" : ""))??'null') . (implode("\n", $this->classComments)??'null') . (((count($this->classComments) > 0 ? "\n" : ""))??'null') . "class " . $this->getShortClassName($this->fullClassName) . ((($this->baseFullClassName !== null ? " extends " . GeneratorTools::toPhpType($this->baseFullClassName) : ""))??'null') . "\n" . "{\n" . (((count($this->vars) > 0 ? "\t" . (implode("\n\t\n\t", $varLines)??'null') . "\n\n" : ""))??'null') . (((count($this->methods) > 0 ? "\t" . (implode("\n\n\t", $this->methods)??'null') . "\n" : ""))??'null') . (((count($this->customs) > 0 ? "\t" . (implode("\n\n\t", $this->customs)??'null') . "\n" : ""))??'null') . "}";
		return $s;
	}

	public function __toString() {
		return $this->toString();
	}
}

