<?php

namespace nanodb\generator;

use \nanodb\orm\Db;

class OrmQueryGenerator
{
	/**
	 * @param Db $db
	 * @param string $table
	 * @param mixed $vars
	 * @param string $modelClassName
	 * @param string $queryClassName
	 * @param OrmPositions $positions
	 * @return PhpClass
	 */
	public function getQueryClass ($db, $table, $vars, $modelClassName, $queryClassName, $positions)
    {
		$klass = new PhpClass($queryClassName, "nanodb.orm.DbQuery");
		$klass->addGlobalComment("// This file is autogenerated. Do not edit!");
		$klass->addClassComment("/**\n" . " * @method " . Tools::toPhpType($modelClassName) . "[] findMany()\n" . " * @method " . Tools::toPhpType($modelClassName) . " findOne()\n" . " * @method " . Tools::toPhpType($queryClassName) . " whereField(string \$field, string \$op, \$value)\n" . " * @method " . Tools::toPhpType($queryClassName) . " where(string \$rawSqlText, array \$params=null)\n" . " * @method " . Tools::toPhpType($queryClassName) . " orderDesc(string \$field)\n" . " * @method " . Tools::toPhpType($queryClassName) . " orderAsc(string \$field)\n" . " * @method " . Tools::toPhpType($queryClassName) . " order(string \$rawSqlText)\n" . " * @method " . Tools::toPhpType($queryClassName) . " skip(int \$skip)\n" . " * @method " . Tools::toPhpType($queryClassName) . " limit(int \$limit)\n" . " * @method " . Tools::toPhpType($queryClassName) . " distinct()\n" . " */");
		$klass->addVar(new PhpVar("table", null, "'" . $table . "'"), "protected");
		$klass->addMethod("newFromDbRow", [new PhpVar("row", "array")], Tools::toPhpType($modelClassName), "\$obj = new " . Tools::toPhpType($modelClassName) . "();\n" . "\$this->serializer->deserializeObject(\$row, \$obj, [ " . implode(", ", array_map(function ($x) {
			return "'" . $x->haxeName . "'";
		}, $vars)) . " ]);\n" . "return \$obj;", "protected");
		return $klass;
	}

	/**
	 * @param Db $db
	 * @param OrmTable $table
	 * @param string $customOrmClassName
	 * @param string $outPath
	 * @param OrmPositions $positions
	 * @return void
	 */
	public function make ($db, $table, $customOrmClassName, $outPath, $positions)
    {
		Log::start($table->tableName . " => " . $table->queryClassName);

		$vars = OrmTools::fields2vars($table->tableName, $db->connection->getFields($table->tableName), $positions);
		$queryClass = $this->getQueryClass($db, $table->tableName, $vars, $table->customModelClassName, $table->queryClassName, $positions);
		$destFileName = $outPath . (str_replace(".", "/", $table->queryClassName)??'null') . ".php";
		Tools::mkdir(dirname($destFileName));
		file_put_contents($destFileName, $queryClass->toString());

		Log::finishSuccess();
	}
}

