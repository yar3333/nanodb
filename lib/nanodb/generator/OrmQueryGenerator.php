<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace nanodb\generator;

use \nanodb\generator\OrmTools as GeneratorOrmTools;
use \nanodb\generator\Tools as GeneratorTools;
use \nanodb\generator\Log as GeneratorLog;
use \nanodb\generator\PhpClass as GeneratorPhpClass;
use \nanodb\orm\Db;
use \nanodb\generator\PhpVar as GeneratorPhpVar;
use \nanodb\generator\OrmPositions as GeneratorOrmPositions;
use \nanodb\generator\OrmTable as GeneratorOrmTable;

class OrmQueryGenerator {
	/**
	 * @return void
	 */
	public function __construct () {
	}

	/**
	 * @param string $table
	 * @param mixed $vars
	 * @param string $queryClassName
	 * @param string $customModelClassName
	 * @param string $customManagerClassName
	 * 
	 * @return GeneratorPhpClass
	 */
	public function getQueryClass ($table, $vars, $queryClassName, $customModelClassName, $customManagerClassName) {
		$model = new GeneratorPhpClass($queryClassName, "nanodb.orm.SqlQuery");
		$model->addMethod("__construct", [new GeneratorPhpVar("db", GeneratorTools::toPhpType("nanodb.orm.Db")), new GeneratorPhpVar("manager", GeneratorTools::toPhpType($customManagerClassName))], null, "parent::__construct('" . $table . "', \$db, \$manager);");
		$model->addMethod("whereField", [new GeneratorPhpVar("field", "string"), new GeneratorPhpVar("op", "string"), new GeneratorPhpVar("value", null)], GeneratorTools::toPhpType($queryClassName), "parent::whereField(\$field, \$op, \$value);\nreturn \$this;");
		$model->addMethod("where", [new GeneratorPhpVar("rawSqlText", "string")], GeneratorTools::toPhpType($queryClassName), "parent::where(\$rawSqlText);\nreturn \$this;");
		$model->addMethod("orderAsc", [new GeneratorPhpVar("value", null)], GeneratorTools::toPhpType($queryClassName), "parent::orderAsc(\$value);\nreturn \$this;");
		$model->addMethod("orderDesc", [new GeneratorPhpVar("value", null)], GeneratorTools::toPhpType($queryClassName), "parent::orderDesc(\$value);\nreturn \$this;");
		$model->addMethod("findMany", [new GeneratorPhpVar("limit", "int", "null"), new GeneratorPhpVar("offset", "int", "null")], (GeneratorTools::toPhpType($customModelClassName)??'null') . "[]", "return parent::findMany(\$limit, \$offset);");
		$model->addMethod("findOne", [], "?" . (GeneratorTools::toPhpType($customModelClassName)??'null'), "return parent::findOne();");
		return $model;
	}

	/**
	 * @param Db $db
	 * @param GeneratorOrmTable $table
	 * @param string $outPath
	 * @param GeneratorOrmPositions $positions
	 * 
	 * @return void
	 */
	public function make ($db, $table, $outPath, $positions) {
		GeneratorLog::start($table->tableName . " => " . $table->queryClassName);
		$vars = GeneratorOrmTools::fields2vars($table->tableName, $db->connection->getFields($table->tableName), $positions);
		$klass = $this->getQueryClass($table->tableName, $vars, $table->queryClassName, $table->customModelClassName, $table->customManagerClassName);
		$destFileName = $outPath . (str_replace(".", "/", $table->queryClassName)??'null') . ".php";
		GeneratorTools::mkdir(dirname($destFileName));
		file_put_contents($destFileName, "<?php\n// This file is autogenerated. Do not edit!\n\n" . ($klass->toString()??'null'));
		GeneratorLog::finishSuccess();
	}
}

