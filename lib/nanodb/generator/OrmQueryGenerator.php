<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace nanodb\generator;

use \nanodb\generator\OrmTools as GeneratorOrmTools;
use \nanodb\generator\Tools as GeneratorTools;
use \nanodb\generator\Log as GeneratorLog;
use \nanodb\generator\PhpClass as GeneratorPhpClass;
use \nanodb\orm\Db;
use \nanodb\generator\PhpVar as GeneratorPhpVar;
use \nanodb\generator\OrmPositions as GeneratorOrmPositions;
use \nanodb\generator\OrmTable as GeneratorOrmTable;

class OrmQueryGenerator {
	/**
	 * @return void
	 */
	public function __construct () {
	}

	/**
	 * @param Db $db
	 * @param string $table
	 * @param mixed $vars
	 * @param string $modelClassName
	 * @param string $queryClassName
	 * @param GeneratorOrmPositions $positions
	 * 
	 * @return GeneratorPhpClass
	 */
	public function getQueryClass ($db, $table, $vars, $modelClassName, $queryClassName, $positions) {
		$klass = new GeneratorPhpClass($queryClassName, "nanodb.orm.DbQuery");
		$klass->addGlobalComment("// This file is autogenerated. Do not edit!");
		$klass->addClassComment("/**\n" . " * @method " . GeneratorTools::toPhpType($modelClassName) . "[] findMany\n" . " * @method " . GeneratorTools::toPhpType($modelClassName) . " findOne\n" . " * @method " . GeneratorTools::toPhpType($queryClassName) . " whereField(string \$field, string \$op, \$value)\n" . " * @method " . GeneratorTools::toPhpType($queryClassName) . " where(string \$rawSqlText, array \$params=null)\n" . " * @method " . GeneratorTools::toPhpType($queryClassName) . " orderDesc(string \$field)\n" . " * @method " . GeneratorTools::toPhpType($queryClassName) . " orderAsc(string \$field)\n" . " * @method " . GeneratorTools::toPhpType($queryClassName) . " order(string \$rawSqlText)\n" . " * @method " . GeneratorTools::toPhpType($queryClassName) . " skip(int \$skip)\n" . " * @method " . GeneratorTools::toPhpType($queryClassName) . " limit(int \$limit)\n" . " */");
		$klass->addVar(new GeneratorPhpVar("table", null, "\"" . $table . "\""), "protected");
		$klass->addMethod("newFromDbRow", [new GeneratorPhpVar("row", "array")], GeneratorTools::toPhpType($modelClassName), "\$obj = new " . GeneratorTools::toPhpType($modelClassName) . "();\n" . "\$this->serializer->deserializeObject(\$row, \$obj, [ " . (implode(", ", array_map(function ($x) {
			return "'" . $x->haxeName . "'";
		}, $vars))??'null') . " ]);\n" . "return \$obj;", "protected");
		return $klass;
	}

	/**
	 * @param Db $db
	 * @param GeneratorOrmTable $table
	 * @param string $customOrmClassName
	 * @param string $outPath
	 * @param GeneratorOrmPositions $positions
	 * 
	 * @return void
	 */
	public function make ($db, $table, $customOrmClassName, $outPath, $positions) {
		GeneratorLog::start($table->tableName . " => " . $table->queryClassName);
		$vars = GeneratorOrmTools::fields2vars($table->tableName, $db->connection->getFields($table->tableName), $positions);
		$queryClass = $this->getQueryClass($db, $table->tableName, $vars, $table->customModelClassName, $table->queryClassName, $positions);
		$destFileName = $outPath . (str_replace(".", "/", $table->queryClassName)??'null') . ".php";
		GeneratorTools::mkdir(dirname($destFileName));
		file_put_contents($destFileName, $queryClass->toString());
		GeneratorLog::finishSuccess();
	}
}

