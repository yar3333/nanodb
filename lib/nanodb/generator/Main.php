<?php

namespace nanodb\generator;

use nanodb\orm\Db;

class Main
{
	public static function main() : void
    {
		Log::$instance->depthLimit = 2;

		$args = $GLOBALS['argv'];
		$args = \array_slice($args, 1, null);

		$options = new CmdOptions();
		$options->add('databaseConnectionString', '', null, "Database connecting string like 'mysql://<user>:<password>@<host>/<database_name>'.");
		$options->add('autogeneratedNamespace', "models\\autogenerated", ['-a', '--autogenerated-namespace'], "Namespace for autogenerated classes.\n" . "Default is 'models.autogenerated'.");
		$options->add('customNamespace', 'models', ['-c', '--custom-namespace'], "Namespace for your custom classes.\n" . "Default is 'models'.");
		$options->add('outPath', '', ['-o', '--out-path'], 'This is a base directory path for generated files.');
		$options->addRepeatable('ignoreTables', 'string', ['-i', '--ignore-table'], 'Table name to ignore.');
		$options->addRepeatable('noInstantiateManagers', 'string', ['-nim', '--no-instantiate-manager'], "Table name to skip manager creating in autogenerated Orm class.\n" . "You can use this switch for your managers with a custom constructors.\n" . "In this case you must instantiate these managers manually\n" . '(in regular case - in your custom Orm constructor).');
		$options->addRepeatable('positions', 'string', ['-pf', '--position-field'], "Field name treated as record number (1, 2, 3, ...).\n" . "Values of such fields will be autocalculated on records creating.\n" . "Can be specified in next forms:\n" . "\t`field` or `*.field` - to specify fields in any table;\n" . "\t`table.field` - to specify field in specified table only.\n" . 'Default is `position`.');
		$options->parse($args);

		if (\count($args) > 0) {
			$outPath = $options->get('outPath');
			$databaseConnectionString = $options->get('databaseConnectionString');
			if ($databaseConnectionString !== '') {
				Log::start('Generate object related mapping classes');
				$positions = $options->get('positions');
				if (\count($positions) === 0) $positions = ['position'];
				(new OrmGenerator($outPath))->generate(new Db($databaseConnectionString), str_replace("\\", '.', ltrim($options->get('autogeneratedNamespace'), "\\")), str_replace("\\", '.', ltrim($options->get('customNamespace'), "\\")), $options->get('ignoreTables'), $options->get('noInstantiateManagers'), new OrmPositions($positions));
				Log::finishSuccess();
			} else {
				self::fail('Database connection string must be specified.');
			}
		} else {
			echo("Generating set of the php classes from database tables.\n");
			echo("\nUsage:\n\tbin\\nanodb <databaseConnectionString> [options]\n");
			echo("\nOptions:\n\n");
			echo($options->getHelpMessage() . "\n");
		}
		exit(0);
	}

	public static function fail($message = null) : void
    {
		if ($message !== null) echo('ERROR: ' . $message . "\n");
		exit(1);
	}
}

