<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace nanodb\generator;

use \nanodb\php\_Boot\HxAnon;
use \nanodb\generator\OrmTools as GeneratorOrmTools;
use \nanodb\php\Boot;
use \nanodb\generator\Log as GeneratorLog;
use \nanodb\generator\StringToolsEx as GeneratorStringToolsEx;
use \nanodb\generator\PhpClass as GeneratorPhpClass;
use \nanodb\orm\Db;
use \nanodb\generator\OrmPositions as GeneratorOrmPositions;
use \nanodb\generator\OrmTable as GeneratorOrmTable;

class OrmManagerGenerator {
	/**
	 * @return void
	 */
	public function __construct () {
	}

	/**
	 * @param string $table
	 * @param mixed $vars
	 * @param string $modelClassName
	 * @param mixed $whereVars
	 * @param GeneratorPhpClass $model
	 * @param GeneratorOrmPositions $positions
	 * 
	 * @return void
	 */
	public function createGetByMethodMany ($table, $vars, $modelClassName, $whereVars, $model, $positions) {
		if (($whereVars === null) || (count($whereVars) === 0)) {
			return;
		}
		$model->addMethod("getBy" . (implode("And", array_map(function ($v) {
			return GeneratorStringToolsEx::capitalize($v->haxeName);
		}, $whereVars))??'null'), array_merge($whereVars, [GeneratorOrmTools::createVar("_order", "String", $this->getOrderDefVal($vars, $positions))]), "Array<" . ($modelClassName??'null') . ">", "return getBySqlMany('SELECT * FROM `" . $table . "`" . ($this->getWhereSql($whereVars)??'null') . " + (_order != null ? ' ORDER BY ' + _order : ''));");
	}

	/**
	 * @param string $table
	 * @param mixed $vars
	 * @param string $modelClassName
	 * @param mixed $whereVars
	 * @param GeneratorPhpClass $model
	 * 
	 * @return void
	 */
	public function createGetByMethodOne ($table, $vars, $modelClassName, $whereVars, $model) {
		if (($whereVars === null) || (count($whereVars) === 0)) {
			return;
		}
		$model->addMethod("getBy" . (implode("And", array_map(function ($x) {
			return GeneratorStringToolsEx::capitalize($x->haxeName);
		}, $whereVars))??'null'), $whereVars, $modelClassName, "return getBySqlOne('SELECT * FROM `" . $table . "`" . ($this->getWhereSql($whereVars)??'null') . ");");
	}

	/**
	 * @param Db $db
	 * @param string $table
	 * @param mixed $vars
	 * @param string $modelClassName
	 * @param string $autogenManagerClassName
	 * @param string $customOrmClassName
	 * @param GeneratorOrmPositions $positions
	 * 
	 * @return GeneratorPhpClass
	 */
	public function getAutogenManager ($db, $table, $vars, $modelClassName, $autogenManagerClassName, $customOrmClassName, $positions) {
		$_gthis = $this;
		$model = new GeneratorPhpClass($autogenManagerClassName);
		$model->addVar(new HxAnon([
			"haxeName" => "db",
			"haxeType" => "orm.Db",
			"haxeDefVal" => null,
		]), true);
		$model->addVar(new HxAnon([
			"haxeName" => "orm",
			"haxeType" => $customOrmClassName,
			"haxeDefVal" => null,
		]), true);
		$model->addVar(new HxAnon([
			"haxeName" => "query(get, never)",
			"haxeType" => "orm.SqlQuery<" . ($modelClassName??'null') . ">",
			"haxeDefVal" => null,
		]));
		$this1 = [];
		$model->addMethod("get_query", $this1, "orm.SqlQuery<" . ($modelClassName??'null') . ">", "return new orm.SqlQuery<" . ($modelClassName??'null') . ">(\"" . $table . "\", db, this);", true);
		$model->addMethod("new", [new HxAnon([
			"haxeName" => "db",
			"haxeType" => "orm.Db",
			"haxeDefVal" => null,
		]), new HxAnon([
			"haxeName" => "orm",
			"haxeType" => $customOrmClassName,
			"haxeDefVal" => null,
		])], "Void", "this.db = db;\x0Athis.orm = orm;");
		$tmp = "var _obj = new " . ($modelClassName??'null') . "(db, orm);\x0A" . (implode("\x0A", array_map(function ($x) {
			return "_obj." . ($x->haxeName??'null') . " = " . ($x->haxeName??'null') . ";";
		}, $vars))??'null') . "\x0A" . "return _obj;";
		$model->addMethod("newModelFromParams", $vars, $modelClassName, $tmp, true);
		$model->addMethod("newModelFromRow", [GeneratorOrmTools::createVar("d", "Dynamic")], $modelClassName, "var _obj = new " . ($modelClassName??'null') . "(db, orm);\x0A" . (implode("\x0A", array_map(function ($x1) {
			return "_obj." . ($x1->haxeName??'null') . " = Reflect.field(d, '" . ($x1->haxeName??'null') . "');";
		}, $vars))??'null') . "\x0A" . "return _obj;", true);
		$model->addMethod("where", [GeneratorOrmTools::createVar("field", "String"), GeneratorOrmTools::createVar("op", "String"), GeneratorOrmTools::createVar("value", "Dynamic")], "orm.SqlQuery<" . ($modelClassName??'null') . ">", "return query.where(field, op, value);");
		$getVars = array_filter($vars, function ($x2) {
			return $x2->isKey;
		});
		if (count($getVars) > 0) {
			$model->addMethod("get", $getVars, $modelClassName, "return getBySqlOne('SELECT * FROM `" . $table . "`" . ($this->getWhereSql($getVars)??'null') . ");");
		}
		$createVars = array_filter($vars, function ($x3) {
			return !$x3->isAutoInc;
		});
		$model->addMethod("create", $createVars, $modelClassName, (implode("", array_map(function ($x4)  use (&$table, &$db, &$vars, &$_gthis) {
			$this2 = "if (" . ($x4->haxeName??'null') . " == null)\x0A" . "{\x0A" . "\x09position = db.query('SELECT MAX(`" . $x4->name . "`) FROM `" . $table . "`";
			$this3 = $_gthis->getForeignKeyVars($db, $table, $vars);
			return $this2 . ($_gthis->getWhereSql($this3)??'null') . ").getIntResult(0) + 1;\x0A" . "}\x0A\x0A";
		}, array_filter($createVars, Boot::getInstanceClosure($positions, 'is'))))??'null') . "db.query('INSERT INTO `" . $table . "`(" . (implode(", ", array_map(function ($x5) {
			return "`" . $x5->name . "`";
		}, $createVars))??'null') . ") VALUES (' + " . (implode(" + ', ' + ", array_map(function ($x6) {
			return "db.quote(" . ($x6->haxeName??'null') . ")";
		}, $createVars))??'null') . " + ')');\x0A" . "return newModelFromParams(" . (implode(", ", array_map(function ($x7) {
			if ($x7->isAutoInc) {
				return "db.lastInsertId()";
			} else {
				return $x7->haxeName;
			}
		}, $vars))??'null') . ");");
		$model->addMethod("createNamed", [GeneratorOrmTools::createVar("data", "{ " . (implode(", ", array_map(function ($x8) {
			return ($x8->haxeName??'null') . ":" . ($x8->haxeType??'null');
		}, $createVars))??'null') . " }")], $modelClassName, (implode("", array_map(function ($x9)  use (&$table, &$db, &$vars, &$_gthis) {
			$this4 = "if (data." . ($x9->haxeName??'null') . " == null)\x0A" . "{\x0A" . "\x09data." . ($x9->haxeName??'null') . " = db.query('SELECT MAX(`" . $x9->name . "`) FROM `" . $table . "`";
			$this5 = $_gthis->getForeignKeyVars($db, $table, $vars);
			return $this4 . ($_gthis->getWhereSql($this5)??'null') . ").getIntResult(0) + 1;\x0A" . "}\x0A\x0A";
		}, array_filter($createVars, function ($x10)  use (&$positions) {
			return $positions->is($x10);
		})))??'null') . "db.query('INSERT INTO `" . $table . "`(" . (implode(", ", array_map(function ($x11) {
			return "`" . $x11->name . "`";
		}, $createVars))??'null') . ") VALUES (' + " . (implode(" + ', ' + ", array_map(function ($x12) {
			return "db.quote(data." . ($x12->haxeName??'null') . ")";
		}, $createVars))??'null') . " + ')');\x0A" . "return newModelFromParams(" . (implode(", ", array_map(function ($x13) {
			if ($x13->isAutoInc) {
				return "db.lastInsertId()";
			} else {
				return "data." . ($x13->haxeName??'null');
			}
		}, $vars))??'null') . ");");
		$dataVars = [GeneratorOrmTools::createVar("data", "{ " . (implode(", ", array_map(function ($x14) {
			return ((($x14->isKey ? "" : "?"))??'null') . ($x14->haxeName??'null') . ":" . ($x14->haxeType??'null');
		}, $createVars))??'null') . " }")];
		if (current(array_filter($vars, function ($x15) {
			return $x15->isKey;
		}))) {
			$model->addMethod("createOptional", $dataVars, $modelClassName, "createOptionalNoReturn(data);\x0A" . "return get(" . (implode(", ", array_map(function ($x16) {
				if ($x16->isAutoInc) {
					return "db.lastInsertId()";
				} else {
					return "data." . ($x16->haxeName??'null');
				}
			}, $getVars))??'null') . ");");
		}
		$model->addMethod("createOptionalNoReturn", $dataVars, "Void", (implode("", array_map(function ($x17)  use (&$table, &$db, &$vars, &$_gthis) {
			$this6 = "if (data." . ($x17->haxeName??'null') . " == null)\x0A" . "{\x0A" . "\x09data." . ($x17->haxeName??'null') . " = db.query('SELECT MAX(`" . $x17->name . "`) FROM `" . $table . "`";
			$this7 = $_gthis->getForeignKeyVars($db, $table, $vars);
			return $this6 . ($_gthis->getWhereSql($this7)??'null') . ").getIntResult(0) + 1;\x0A" . "}\x0A\x0A";
		}, array_filter($createVars, function ($x18)  use (&$positions) {
			return $positions->is($x18);
		})))??'null') . "var fields = [];\x0A" . "var values = [];\x0A" . (implode("", array_map(function ($x19) {
			if ($x19->isKey) {
				return "fields.push('`" . $x19->name . "`'); values.push(db.quote(data." . ($x19->haxeName??'null') . "));\x0A";
			} else {
				return "if (Reflect.hasField(data, '" . ($x19->haxeName??'null') . "')) { fields.push('`" . $x19->name . "`'); values.push(db.quote(data." . ($x19->haxeName??'null') . ")); }\x0A";
			}
		}, $createVars))??'null') . "db.query('INSERT INTO `" . $table . "`(' + fields.join(\", \") + ') VALUES (' + values.join(\", \") + ')');\x0A");
		$deleteVars = array_filter($vars, function ($x20) {
			return $x20->isKey;
		});
		if (count($deleteVars) === 0) {
			$deleteVars = $vars;
		}
		$model->addMethod("delete", $deleteVars, "Void", "db.query('DELETE FROM `" . $table . "`" . ($this->getWhereSql($deleteVars)??'null') . " + ' LIMIT 1');");
		$model->addMethod("getAll", [GeneratorOrmTools::createVar("_order", "String", $this->getOrderDefVal($vars, $positions))], "Array<" . ($modelClassName??'null') . ">", "return getBySqlMany('SELECT * FROM `" . $table . "`' + (_order != null ? ' ORDER BY ' + _order : ''));");
		$model->addMethod("getBySqlOne", [GeneratorOrmTools::createVar("sql", "String")], $modelClassName, "var rows = db.query(sql + ' LIMIT 1');\x0A" . "if (rows.length == 0) return null;\x0A" . "return newModelFromRow(rows.next());");
		$model->addMethod("getBySqlMany", [GeneratorOrmTools::createVar("sql", "String")], "Array<" . ($modelClassName??'null') . ">", "var rows = db.query(sql);\x0A" . "var list : Array<" . ($modelClassName??'null') . "> = [];\x0A" . "for (row in rows)\x0A" . "{\x0A" . "\x09list.push(newModelFromRow(row));\x0A" . "}\x0A" . "return list;");
		$collection = $db->connection->getUniques($table);
		foreach ($collection as $key => $value) {
			unset($fields);
			$fields = $value;
			$vs = array_filter($vars, function ($x21)  use (&$fields) {
				return $fields->hasValue($x21->name);
			});
			$_gthis->createGetByMethodOne($table, $vars, $modelClassName, $vs, $model);

		}

		$collection1 = $this->getForeignKeyVars($db, $table, $vars);
		foreach ($collection1 as $key1 => $value1) {
			$tmp1 = [$value1];
			$_gthis->createGetByMethodMany($table, $vars, $modelClassName, $tmp1, $model, $positions);
		}

		return $model;
	}

	/**
	 * @param string $table
	 * @param mixed $vars
	 * @param string $modelClassName
	 * @param string $fullClassName
	 * @param string $baseClassName
	 * 
	 * @return GeneratorPhpClass
	 */
	public function getCustomManager ($table, $vars, $modelClassName, $fullClassName, $baseClassName = null) {
		$model = new GeneratorPhpClass($fullClassName, $baseClassName);
		$model->addImport($modelClassName);
		return $model;
	}

	/**
	 * @param Db $db
	 * @param string $table
	 * @param mixed $vars
	 * 
	 * @return mixed
	 */
	public function getForeignKeyVars ($db, $table, $vars) {
		$foreignKeys = $db->connection->getForeignKeys($table);
		$foreignKeyVars = array_filter($vars, function ($v)  use (&$foreignKeys) {
			return current(array_filter($foreignKeys, function ($fk)  use (&$v) {
				return $fk->key === $v->name;
			}));
		});
		return $foreignKeyVars;
	}

	/**
	 * @param mixed $vars
	 * @param GeneratorOrmPositions $positions
	 * 
	 * @return string
	 */
	public function getOrderDefVal ($vars, $positions) {
		$positionVar = array_filter($vars, function ($x)  use (&$positions) {
			return $positions->is($x);
		});
		if (count($positionVar) === 0) {
			return "null";
		} else {
			return "'" . (implode(", ", array_map(function ($x1) {
				return $x1->name;
			}, $positionVar))??'null') . "'";
		}
	}

	/**
	 * @param mixed $vars
	 * 
	 * @return string
	 */
	public function getWhereSql ($vars) {
		if (count($vars) > 0) {
			return " WHERE " . (implode("+ ' AND ", array_map(function ($v) {
				return "`" . $v->name . "` = ' + db.quote(" . ($v->haxeName??'null') . ")";
			}, $vars))??'null');
		} else {
			return "'";
		}
	}

	/**
	 * @param Db $db
	 * @param GeneratorOrmTable $table
	 * @param string $customOrmClassName
	 * @param string $srcPath
	 * @param GeneratorOrmPositions $positions
	 * 
	 * @return void
	 */
	public function make ($db, $table, $customOrmClassName, $srcPath, $positions) {
		GeneratorLog::start(($table->tableName??'null') . " => " . ($table->customManagerClassName??'null'));
		$vars = GeneratorOrmTools::fields2vars($table->tableName, $db->connection->getFields($table->tableName), $positions);
		$autoGeneratedManager = $this->getAutogenManager($db, $table->tableName, $vars, $table->customModelClassName, $table->autogenManagerClassName, $customOrmClassName, $positions);
		$destFileName = ($srcPath??'null') . (str_replace(".", "/", $table->autogenManagerClassName)??'null') . ".hx";
		mkdir(dirname($destFileName));
		file_put_contents($destFileName, "// This is autogenerated file. Do not edit!\x0A\x0A" . ($autoGeneratedManager->toString()??'null'));
		if (!file_exists(($srcPath??'null') . "/" . (str_replace(".", "/", $table->customManagerClassName)??'null') . ".hx")) {
			$customManager = $this->getCustomManager($table->tableName, $vars, $table->customModelClassName, $table->customManagerClassName, $table->autogenManagerClassName);
			$destFileName1 = ($srcPath??'null') . (str_replace(".", "/", $table->customManagerClassName)??'null') . ".hx";
			mkdir(dirname($destFileName1));
			file_put_contents($destFileName1, $customManager->toString());
		}
		GeneratorLog::finishSuccess();
	}
}

Boot::registerClass(OrmManagerGenerator::class, 'generator.OrmManagerGenerator');
