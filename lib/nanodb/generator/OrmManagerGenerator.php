<?php

namespace nanodb\generator;

use \nanodb\orm\Db;

class OrmManagerGenerator
{
    private $createdMethods = [];
    private function allowedMethod(string $name) : bool
    {
        if (in_array($name, $this->createdMethods)) return false;
        $this->createdMethods[] = $name;
        return true;
    }
	/**
	 * @param mixed $vars
	 * @param string $modelClassName
	 * @param mixed $whereVars
	 * @param PhpClass $model
	 * @param OrmPositions $positions
	 * @return void
	 */
	public function createGetByMethodMany($vars, $modelClassName, $whereVars, $model, $positions)
    {
		if ($whereVars === null || count($whereVars) === 0) return;
		$method = "getBy" . implode("And", array_map(function ($v) { return Tools::fieldAsFunctionNamePart($v->haxeName); }, $whereVars));
        if (!$this->allowedMethod($method)) return;
		$model->addMethod(
		    $method,
            array_merge($whereVars, [new PhpVar("_order", "?string", $this->getOrderDefVal($vars, $positions))]), Tools::toPhpType($modelClassName) . "[]", "return \$this->getMany('SELECT * FROM `' . \$this->table . '`" . $this->getWhereSql($whereVars) . " . (\$_order !== null ? ' ORDER BY ' . \$_order : ''));"
        );
	}

	/**
	 * @param mixed $vars
	 * @param string $modelClassName
	 * @param mixed $whereVars
	 * @param PhpClass $model
	 * @return void
	 */
	public function createGetByMethodOne($vars, $modelClassName, $whereVars, $model)
    {
		if (!$whereVars) return;
        $method = "getBy" . (implode("And", array_map(function ($x) {
                    return Tools::fieldAsFunctionNamePart($x->haxeName);
                }, $whereVars))??'null');
        if (!$this->allowedMethod($method)) return;
		$model->addMethod($method, $whereVars, "?" . Tools::toPhpType($modelClassName), "return \$this->getOne('SELECT * FROM `' . \$this->table . '`" . $this->getWhereSql($whereVars) . ");");
	}

	/**
	 * @param Db $db
	 * @param string $table
	 * @param mixed $vars
	 * @param string $modelClassName
	 * @param string $autogeneratedManagerClassName
	 * @param string $customOrmClassName
	 * @param string $customManagerClassName
	 * @param string $queryClassName
	 * @param OrmPositions $positions
	 * @return PhpClass
	 */
	public function getAutogenManager($db, $table, $vars, $modelClassName, $autogeneratedManagerClassName, $customOrmClassName, $customManagerClassName, $queryClassName, $positions)
    {
		$_gthis = $this;
		$klass = new PhpClass($autogeneratedManagerClassName, $queryClassName);
		$klass->addGlobalComment("// This file is autogenerated. Do not edit!");
		$dbPhpVar = new PhpVar("db", Tools::toPhpType("nanodb.orm.Db"));
		$ormPhpVar = new PhpVar("orm", Tools::toPhpType($customOrmClassName));
		$serializerPhpVar = new PhpVar("serializer", Tools::toPhpType("nanodb.orm.ISerializer"));
		$klass->addVar($ormPhpVar, "protected");
		$klass->addMethod("__construct", [$dbPhpVar, $ormPhpVar, $serializerPhpVar], null, "parent::__construct(\$db, \$serializer);\n" . "\$this->orm = \$orm;");
		$getVars = array_filter($vars, function ($x) { return $x->isKey; });
		if ($getVars) {
			$klass->addMethod("get", $getVars, "?" . Tools::toPhpType($modelClassName), "return \$this->getOne('SELECT * FROM `' . \$this->table . '`" . $this->getWhereSql($getVars) . ");");
		}
		$createVars = array_filter($vars, function ($x1) { return !$x1->isAutoInc; });
		$autoIncVars = array_filter($vars, function ($x2) { return $x2->isAutoInc; });
		$klass->addMethod("add", [new PhpVar("obj", Tools::toPhpType($modelClassName))], "void", implode("", array_map(function ($x3)  use (&$table, &$db, &$vars, &$_gthis) {
			$this1 = "if (\$obj->" . $x3->haxeName . " == null)\n" . "{\n" . "\t\$obj->" . $x3->name . " = \$this->db->query('SELECT MAX(`" . $x3->name . "`) FROM `' . \$this->table . '`";
			$this2 = $_gthis->getForeignKeyVars($db, $table, $vars);
			return $this1 . ($_gthis->getWhereSql($this2, "obj->")??'null') . ")->getIntResult(0) + 1;\n" . "}\n\n";
		}, array_filter($createVars, function ($x4)  use (&$positions) {
			return $positions->is($x4->table, $x4->name);
		}))) . "\$data = \$this->serializer->serializeObject(\$obj, [ " . implode(", ", array_map(function ($x5) {
			return "'" . $x5->name . "'";
		}, $createVars)) . " ]);\n" . "\$fields = [];\n" . "\$values = [];\n" . "foreach (\$data as \$key => \$value) { \$fields[] = \"`\$key`\"; \$values[] = \$this->db->quote(\$value); }\n" . "\$this->db->query('INSERT INTO `' . \$this->table . '`(' . implode(', ', \$fields) . ') VALUES (' . implode(', ', \$values) . ')');" . ((count($autoIncVars) > 0 ? "\n" . implode("\n", array_map(function ($v) {
			return "\$obj->" . $v->haxeName . " = \$this->db->lastInsertId();";
		}, $autoIncVars)) : "")));
		if (current(array_filter($vars, function ($v1) {
			return $v1->isKey;
		})) && current(array_filter($vars, function ($v2) {
			return !$v2->isKey;
		}))) {
			$savedVars = array_filter($vars, function ($v3) { return !$v3->isKey; });
			$whereVars = array_filter($vars, function ($v4) { return $v4->isKey; });
			$klass->addMethod("save", [new PhpVar("obj", Tools::toPhpType($modelClassName)), new PhpVar("properties", "string[]", "null")], "void", "if (\$properties === null) \$properties = [ " . implode(", ", array_map(function ($x6) {
				return "'" . $x6->name . "'";
			}, $savedVars)) . " ];\n" . "\n" . "\$data = \$this->serializer->serializeObject(\$obj, \$properties);\n" . "\$sets = []; foreach (\$data as \$key => \$value) \$sets[] = \"`\$key` = \" . \$this->db->quote(\$value);\n" . "\n" . "\$keys = \$this->serializer->serializeObject(\$obj, [ " . implode(", ", array_map(function ($x7) {
				return "'" . $x7->name . "'";
			}, $whereVars)) . " ]);\n" . "\$wheres = []; foreach (\$keys as \$key => \$value) \$wheres[] = \"`\$key` = \" . \$this->db->quote(\$value);\n" . "\n" . "\$this->db->query('UPDATE `' . \$this->table . '` SET ' . implode(', ', \$sets) . ' WHERE ' . implode(' AND ', \$wheres) . ' LIMIT 1');");
		}
		$deleteVars = array_filter($vars, function ($x8) { return $x8->isKey; });
		if (!$deleteVars)  $deleteVars = $vars;

		$klass->addMethod(
		    "deleteBy" . implode("And", array_map(function ($x9) { return Tools::fieldAsFunctionNamePart($x9->haxeName); }, $deleteVars)),
            $deleteVars,
            "void",
            "\$this->db->query('DELETE FROM `' . \$this->table . '`" . $this->getWhereSql($deleteVars) . " . ' LIMIT 1');"
        );
		$collection = $db->connection->getUniques($table);
		foreach ($collection as $key => $value) {
			unset($fields);
			$fields = $value;
			$vs = array_filter($vars, function ($x10)  use (&$fields) { return in_array($x10->name, $fields, false); });
			$_gthis->createGetByMethodOne($vars, $modelClassName, $vs, $klass);
		}

		$collection1 = $this->getForeignKeyVars($db, $table, $vars);
		foreach ($collection1 as $key1 => $value1) {
			$_gthis->createGetByMethodMany($vars, $modelClassName, [$value1], $klass, $positions);
		}

		return $klass;
	}

	/**
	 * @param mixed $vars
	 * @param string $modelClassName
	 * @param string $fullClassName
	 * @param string $baseClassName
	 * @return PhpClass
	 */
	public function getCustomManager($vars, $modelClassName, $fullClassName, $baseClassName = null)
    {
		$model = new PhpClass($fullClassName, $baseClassName);
		if (Tools::getNamespace($modelClassName) !== Tools::getNamespace($fullClassName)) {
			$model->addImport($modelClassName);
		}
		return $model;
	}

	/**
	 * @param Db $db
	 * @param string $table
	 * @param mixed $vars
	 * @return mixed
	 */
	public function getForeignKeyVars($db, $table, $vars)
    {
		$foreignKeys = $db->connection->getForeignKeys($table);
		$foreignKeyVars = array_filter($vars, function ($v)  use (&$foreignKeys) {
			return current(array_filter($foreignKeys, function ($fk)  use (&$v) {
				return $fk->key === $v->name;
			}));
		});
		return $foreignKeyVars;
	}

	/**
	 * @param mixed $vars
	 * @param OrmPositions $positions
	 * @return string
	 */
	public function getOrderDefVal($vars, $positions)
    {
		$positionVar = array_filter($vars, function($x) use($positions) {
			return $positions->is($x->table, $x->name);
		});
		if (count($positionVar) === 0) return "null";
        return "'" . implode(", ", array_map(function ($x1) { return $x1->name; }, $positionVar)) . "'";
	}

	/**
	 * @param mixed $vars
	 * @param string $varPrefix
	 * @return string
	 */
	public function getWhereSql($vars, $varPrefix = "")
    {
		if ($varPrefix === null) $varPrefix = "";

		if (count($vars) > 0) {
			return " WHERE " . implode(". ' AND ", array_map(function($v)  use($varPrefix) { return "`" . $v->name . "` = ' . \$this->quote(\$" . $varPrefix . $v->haxeName . ")"; }, $vars));
		} else {
			return "'";
		}
	}

	/**
	 * @param Db $db
	 * @param OrmTable $table
	 * @param string $customOrmClassName
	 * @param string $outPath
	 * @param OrmPositions $positions
	 * @return void
	 */
	public function make($db, $table, $customOrmClassName, $outPath, $positions)
    {
		Log::start($table->tableName . " => " . $table->customManagerClassName);

		$vars = OrmTools::fields2vars($table->tableName, $db->connection->getFields($table->tableName), $positions);
		$autoGeneratedManager = $this->getAutogenManager($db, $table->tableName, $vars, $table->customModelClassName, $table->autogeneratedManagerClassName, $customOrmClassName, $table->customManagerClassName, $table->queryClassName, $positions);
		$destFileName = $outPath . str_replace(".", "/", $table->autogeneratedManagerClassName) . ".php";
		Tools::mkdir(dirname($destFileName));
		file_put_contents($destFileName, $autoGeneratedManager->toString());
		if (!file_exists($outPath . "/" . str_replace(".", "/", $table->customManagerClassName) . ".php")) {
			$customManager = $this->getCustomManager($vars, $table->customModelClassName, $table->customManagerClassName, $table->autogeneratedManagerClassName);
			$destFileName1 = $outPath . str_replace(".", "/", $table->customManagerClassName) . ".php";
			Tools::mkdir(dirname($destFileName1));
			file_put_contents($destFileName1, $customManager->toString());
		}

		Log::finishSuccess();
	}
}

