<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace nanodb\generator;

use \nanodb\php\_Boot\HxAnon;
use \nanodb\generator\OrmTools as GeneratorOrmTools;
use \nanodb\php\Boot;
use \nanodb\generator\Log as GeneratorLog;
use \nanodb\generator\PhpClass as GeneratorPhpClass;
use \nanodb\orm\Db;
use \nanodb\generator\OrmPositions as GeneratorOrmPositions;
use \nanodb\generator\OrmTable as GeneratorOrmTable;

class OrmModelGenerator {
	/**
	 * @return void
	 */
	public function __construct () {
	}

	/**
	 * @param string $table
	 * @param mixed $vars
	 * @param string $modelClassName
	 * @param string $customOrmClassName
	 * 
	 * @return GeneratorPhpClass
	 */
	public function getAutogenModel ($table, $vars, $modelClassName, $customOrmClassName) {
		$model = new GeneratorPhpClass($modelClassName);
		$model->addVar(new HxAnon([
			"haxeName" => "db",
			"haxeType" => "orm.Db",
			"haxeDefVal" => null,
		]), true);
		$model->addVar(new HxAnon([
			"haxeName" => "orm",
			"haxeType" => $customOrmClassName,
			"haxeDefVal" => null,
		]), true);
		foreach ($vars as $key => $value) {
			$model->addVar($value);
		}
		$model->addMethod("new", [new HxAnon([
			"haxeName" => "db",
			"haxeType" => "orm.Db",
			"haxeDefVal" => null,
		]), new HxAnon([
			"haxeName" => "orm",
			"haxeType" => $customOrmClassName,
			"haxeDefVal" => null,
		])], "Void", "this.db = db;\x0Athis.orm = orm;");
		if (current(array_filter($vars, function ($v) {
			return $v->isKey;
		})) && current(array_filter($vars, function ($v1) {
			return !$v1->isKey;
		}))) {
			$settedVars = array_filter($vars, function ($v2) {
				if (!$v2->isKey) {
					return !$v2->isAutoInc;
				} else {
					return false;
				}
			});
			if (count($settedVars) > 0) {
				$model->addMethod("set", $settedVars, "Void", implode("\x0A", array_map(function ($v3) {
					return "this." . ($v3->haxeName??'null') . " = " . ($v3->haxeName??'null') . ";";
				}, $settedVars)));
			}
			$savedVars = array_filter($vars, function ($v4) {
				return !$v4->isKey;
			});
			$whereVars = array_filter($vars, function ($v5) {
				return $v5->isKey;
			});
			$this1 = [];
			$model->addMethod("save", $this1, "Void", "db.query(\x0A" . "\x09 'UPDATE `" . $table . "` SET '\x0A" . "\x09\x09+  '" . (implode("\x0A\x09\x09+', ", array_map(function ($v6) {
				return "`" . $v6->name . "` = ' + db.quote(" . ($v6->haxeName??'null') . ")";
			}, $savedVars))??'null') . "\x0A\x09+' WHERE " . (implode("+' AND ", array_map(function ($v7) {
				return "`" . $v7->name . "` = ' + db.quote(" . ($v7->haxeName??'null') . ")";
			}, $whereVars))??'null') . "\x0A\x09+' LIMIT 1'" . "\x0A);");
		}
		return $model;
	}

	/**
	 * @param string $customModelClassName
	 * @param string $autogenModelClassName
	 * 
	 * @return GeneratorPhpClass
	 */
	public function getCustomModel ($customModelClassName, $autogenModelClassName) {
		return new GeneratorPhpClass($customModelClassName, $autogenModelClassName);
	}

	/**
	 * @param Db $db
	 * @param GeneratorOrmTable $table
	 * @param string $customOrmClassName
	 * @param string $srcPath
	 * @param GeneratorOrmPositions $positions
	 * 
	 * @return void
	 */
	public function make ($db, $table, $customOrmClassName, $srcPath, $positions) {
		GeneratorLog::start(($table->tableName??'null') . " => " . ($table->customModelClassName??'null'));
		$vars = GeneratorOrmTools::fields2vars($table->tableName, $db->connection->getFields($table->tableName), $positions);
		$autogenModel = $this->getAutogenModel($table->tableName, $vars, $table->autogenModelClassName, $customOrmClassName);
		$destFileName = ($srcPath??'null') . (str_replace(".", "/", $table->autogenModelClassName)??'null') . ".hx";
		mkdir(dirname($destFileName));
		file_put_contents($destFileName, "// This is autogenerated file. Do not edit!\x0A\x0A" . ($autogenModel->toString()??'null'));
		if (!file_exists(($srcPath??'null') . "/" . (str_replace(".", "/", $table->customModelClassName)??'null') . ".hx")) {
			$customModel = $this->getCustomModel($table->customModelClassName, $table->autogenModelClassName);
			$destFileName1 = ($srcPath??'null') . (str_replace(".", "/", $table->customModelClassName)??'null') . ".hx";
			mkdir(dirname($destFileName1));
			file_put_contents($destFileName1, $customModel->toString());
		}
		GeneratorLog::finishSuccess();
	}
}

Boot::registerClass(OrmModelGenerator::class, 'generator.OrmModelGenerator');
