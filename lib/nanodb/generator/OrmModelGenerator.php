<?php

namespace nanodb\generator;

use \nanodb\orm\Db;

class OrmModelGenerator
{
	/**
	 * @param string $table
	 * @param mixed $vars
	 * @param string $modelClassName
	 * @param string $customOrmClassName
	 * @return PhpClass
	 */
	public function getAutogenModel ($table, $vars, $modelClassName, $customOrmClassName)
    {
		$klass = new PhpClass($modelClassName);
		$klass->addGlobalComment("// This file is autogenerated. Do not edit!");
		foreach ($vars as $key => $value) {
			$klass->addVar($value);
		}
		return $klass;
	}

	/**
	 * @param string $customModelClassName
	 * @param string $autogeneratedModelClassName
	 * @return PhpClass
	 */
	public function getCustomModel ($customModelClassName, $autogeneratedModelClassName)
    {
		return new PhpClass($customModelClassName, $autogeneratedModelClassName);
	}

	/**
	 * @param Db $db
	 * @param OrmTable $table
	 * @param string $customOrmClassName
	 * @param string $outPath
	 * @param OrmPositions $positions
	 * @return void
	 */
	public function make ($db, $table, $customOrmClassName, $outPath, $positions)
    {
		Log::start($table->tableName . " => " . $table->customModelClassName);
		$vars = OrmTools::fields2vars($table->tableName, $db->connection->getFields($table->tableName), $positions);
		$autogeneratedModel = $this->getAutogenModel($table->tableName, $vars, $table->autogeneratedModelClassName, $customOrmClassName);
		$destFileName = $outPath . (str_replace(".", "/", $table->autogeneratedModelClassName)??'null') . ".php";
		Tools::mkdir(dirname($destFileName));
		file_put_contents($destFileName, $autogeneratedModel->toString());
		if (!file_exists($outPath . "/" . (str_replace(".", "/", $table->customModelClassName)??'null') . ".php")) {
			$customModel = $this->getCustomModel($table->customModelClassName, $table->autogeneratedModelClassName);
			$destFileName1 = $outPath . (str_replace(".", "/", $table->customModelClassName)??'null') . ".php";
			Tools::mkdir(dirname($destFileName1));
			file_put_contents($destFileName1, $customModel->toString());
		}
		Log::finishSuccess();
	}
}

