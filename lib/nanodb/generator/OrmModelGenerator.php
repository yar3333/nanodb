<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace nanodb\generator;

use \nanodb\generator\OrmTools as GeneratorOrmTools;
use \nanodb\generator\Tools as GeneratorTools;
use \nanodb\generator\Log as GeneratorLog;
use \nanodb\generator\PhpClass as GeneratorPhpClass;
use \nanodb\orm\Db;
use \nanodb\generator\PhpVar as GeneratorPhpVar;
use \nanodb\generator\OrmPositions as GeneratorOrmPositions;
use \nanodb\generator\OrmTable as GeneratorOrmTable;

class OrmModelGenerator {
	/**
	 * @return void
	 */
	public function __construct () {
	}

	/**
	 * @param string $table
	 * @param mixed $vars
	 * @param string $modelClassName
	 * @param string $customOrmClassName
	 * 
	 * @return GeneratorPhpClass
	 */
	public function getAutogenModel ($table, $vars, $modelClassName, $customOrmClassName) {
		$model = new GeneratorPhpClass($modelClassName);
		$model->addVar(new GeneratorPhpVar("db", GeneratorTools::toPhpType("nanodb.orm.Db")), "protected");
		$model->addVar(new GeneratorPhpVar("orm", GeneratorTools::toPhpType($customOrmClassName)), "protected");
		foreach ($vars as $key => $value) {
			$model->addVar($value);
		}
		$model->addMethod("__construct", [new GeneratorPhpVar("db", GeneratorTools::toPhpType("nanodb.orm.Db")), new GeneratorPhpVar("orm", GeneratorTools::toPhpType($customOrmClassName))], "void", "\$this->db = \$db;\x0A\$this->orm = \$orm;");
		if (current(array_filter($vars, function ($v) {
			return $v->isKey;
		})) && current(array_filter($vars, function ($v1) {
			return !$v1->isKey;
		}))) {
			$settedVars = array_filter($vars, function ($v2) {
				if (!$v2->isKey) {
					return !$v2->isAutoInc;
				} else {
					return false;
				}
			});
			if (count($settedVars) > 0) {
				$model->addMethod("set", $settedVars, "void", implode("\x0A", array_map(function ($v3) {
					return "\$this->" . $v3->haxeName . " = \$" . $v3->haxeName . ";";
				}, $settedVars)));
			}
			$savedVars = array_filter($vars, function ($v4) {
				return !$v4->isKey;
			});
			$whereVars = array_filter($vars, function ($v5) {
				return $v5->isKey;
			});
			$model->addMethod("save", [], "void", "db.query(\x0A" . "\x09 'UPDATE `" . $table . "` SET '\x0A" . "\x09\x09.  '" . (implode("\x0A\x09\x09.', ", array_map(function ($v6) {
				return "`" . $v6->name . "` = ' . \$this->db->quote(\$this->" . $v6->haxeName . ")";
			}, $savedVars))??'null') . "\x0A\x09.' WHERE " . (implode(".' AND ", array_map(function ($v7) {
				return "`" . $v7->name . "` = ' . \$this->db->quote(\$this->" . $v7->haxeName . ")";
			}, $whereVars))??'null') . "\x0A\x09.' LIMIT 1'" . "\x0A);");
		}
		return $model;
	}

	/**
	 * @param string $customModelClassName
	 * @param string $autogenModelClassName
	 * 
	 * @return GeneratorPhpClass
	 */
	public function getCustomModel ($customModelClassName, $autogenModelClassName) {
		return new GeneratorPhpClass($customModelClassName, $autogenModelClassName);
	}

	/**
	 * @param Db $db
	 * @param GeneratorOrmTable $table
	 * @param string $customOrmClassName
	 * @param string $outPath
	 * @param GeneratorOrmPositions $positions
	 * 
	 * @return void
	 */
	public function make ($db, $table, $customOrmClassName, $outPath, $positions) {
		GeneratorLog::start($table->tableName . " => " . $table->customModelClassName);
		$vars = GeneratorOrmTools::fields2vars($table->tableName, $db->connection->getFields($table->tableName), $positions);
		$autogenModel = $this->getAutogenModel($table->tableName, $vars, $table->autogenModelClassName, $customOrmClassName);
		$destFileName = $outPath . (str_replace(".", "/", $table->autogenModelClassName)??'null') . ".php";
		GeneratorTools::mkdir(dirname($destFileName));
		file_put_contents($destFileName, "<?php\x0A// This file is autogenerated. Do not edit!\x0A\x0A" . ($autogenModel->toString()??'null'));
		if (!file_exists($outPath . "/" . (str_replace(".", "/", $table->customModelClassName)??'null') . ".php")) {
			$customModel = $this->getCustomModel($table->customModelClassName, $table->autogenModelClassName);
			$destFileName1 = $outPath . (str_replace(".", "/", $table->customModelClassName)??'null') . ".php";
			GeneratorTools::mkdir(dirname($destFileName1));
			file_put_contents($destFileName1, "<?php\x0A\x0A" . ($customModel->toString()??'null'));
		}
		GeneratorLog::finishSuccess();
	}
}

