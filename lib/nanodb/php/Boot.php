<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace nanodb\php;

use \nanodb\php\_Boot\HxDynamicStr;
use \nanodb\php\_Boot\HxAnon;
use \nanodb\php\_Boot\HxClass;
use \nanodb\Array_hx;
use \nanodb\Std;
use \nanodb\php\_Boot\HxString;
use \nanodb\php\_Boot\HxClosure;
use \nanodb\php\_Boot\HxException;
use \nanodb\php\_Boot\HxEnum;

/**
 * Various Haxe->PHP compatibility utilities.
 * You should not use this class directly.
 */
class Boot {
	const PHP_PREFIX = "nanodb";

	/**
	 * @var mixed
	 * List of Haxe classes registered by their PHP class names
	 */
	static protected $aliases;
	/**
	 * @var mixed
	 * Cache of HxClass instances
	 */
	static protected $classes;
	/**
	 * @var mixed
	 * List of getters (for Reflect)
	 */
	static protected $getters;
	/**
	 * @var mixed
	 * Metadata storage
	 */
	static protected $meta;
	/**
	 * @var mixed
	 * List of setters (for Reflect)
	 */
	static protected $setters;
	/**
	 * @var mixed
	 * Cache for closures created of static methods
	 */
	static protected $staticClosures;

	/**
	 * Concat `left` and `right` if both are strings or string and null.
	 * Otherwise return sum of `left` and `right`.
	 * 
	 * @param mixed $left
	 * @param mixed $right
	 * 
	 * @return mixed
	 */
	static public function addOrConcat ($left, $right) {
		if (is_string($left) || is_string($right)) {
			return $left . $right;
		}
		return ($left + $right);
	}

	/**
	 * Unsafe cast to HxClass
	 * 
	 * @param Class $cls
	 * 
	 * @return HxClass
	 */
	static public function castClass ($cls) {
		return $cls;
	}

	/**
	 * Unsafe cast to HxClosure
	 * 
	 * @param mixed $value
	 * 
	 * @return HxClosure
	 */
	static public function castClosure ($value) {
		return $value;
	}

	/**
	 * Creates Haxe-compatible closure.
	 * @param type `this` for instance methods; full php class name for static methods
	 * @param func Method name
	 * 
	 * @param mixed $target
	 * @param string $func
	 * 
	 * @return HxClosure
	 */
	static public function closure ($target, $func) {
		if (is_string($target)) {
			return Boot::getStaticClosure($target, $func);
		} else {
			return Boot::getInstanceClosure($target, $func);
		}
	}

	/**
	 * Returns `Class<T>` for `HxClosure`
	 * 
	 * @return HxClass
	 */
	static public function closureHxClass () {
		return Boot::getClass(HxClosure::class);
	}

	/**
	 * Create Haxe-compatible anonymous structure of `data` associative array
	 * 
	 * @param mixed $data
	 * 
	 * @return mixed
	 */
	static public function createAnon ($data) {
		return new HxAnon($data);
	}

	/**
	 * Helper method to avoid "Cannot use temporary expression in write context" error for expressions like this:
	 * ```haxe
	 * (new MyClass()).fieldName = 'value';
	 * ```
	 * 
	 * @param mixed $value
	 * 
	 * @return mixed
	 */
	static public function deref ($value) {
		return $value;
	}

	/**
	 * Get `field` of a dynamic `value` in a safe manner (avoid exceptions on trying to get a method)
	 * 
	 * @param mixed $value
	 * @param string $field
	 * 
	 * @return mixed
	 */
	static public function dynamicField ($value, $field) {
		if (method_exists($value, $field)) {
			if (is_string($value)) {
				return Boot::getStaticClosure($value, $field);
			} else {
				return Boot::getInstanceClosure($value, $field);
			}
		}
		if (is_string($value)) {
			$value = new HxDynamicStr($value);
		}
		$tmp = $value;
		return $tmp->{$field};
	}

	/**
	 * @param string $str
	 * 
	 * @return HxDynamicStr
	 */
	static public function dynamicString ($str) {
		return new HxDynamicStr($str);
	}

	/**
	 * Make sure specified class is loaded
	 * 
	 * @param string $phpClassName
	 * 
	 * @return bool
	 */
	static public function ensureLoaded ($phpClassName) {
		if (!class_exists($phpClassName)) {
			return interface_exists($phpClassName);
		} else {
			return true;
		}
	}

	/**
	 * Check if specified values are equal
	 * 
	 * @param mixed $left
	 * @param mixed $right
	 * 
	 * @return bool
	 */
	static public function equal ($left, $right) {
		if ((is_int($left) || is_float($left)) && (is_int($right) || is_float($right))) {
			return ($left == $right);
		}
		if (($left instanceof HxClosure) && ($right instanceof HxClosure)) {
			return $left->equals($right);
		}
		return ($left === $right);
	}

	/**
	 * Get Class<T> instance for PHP fully qualified class name (E.g. '\some\pack\MyClass')
	 * It's always the same instance for the same `phpClassName`
	 * 
	 * @param string $phpClassName
	 * 
	 * @return HxClass
	 */
	static public function getClass ($phpClassName) {
		if (mb_substr($phpClassName, 0, 1) === "\\") {
			$phpClassName = mb_substr($phpClassName, 1, null);
		}
		if (!isset(Boot::$classes[$phpClassName])) {
			$val = new HxClass($phpClassName);
			Boot::$classes[$phpClassName] = $val;
		}
		return Boot::$classes[$phpClassName];
	}

	/**
	 * Returns either Haxe class name for specified `phpClassName` or (if no such Haxe class registered) `phpClassName`.
	 * 
	 * @param string $phpClassName
	 * 
	 * @return string
	 */
	static public function getClassName ($phpClassName) {
		$hxClass = Boot::getClass($phpClassName);
		$name = Boot::getHaxeName($hxClass);
		if ($name === null) {
			return $hxClass->phpClassName;
		} else {
			return $name;
		}
	}

	/**
	 * Returns original Haxe fully qualified class name for this type (if exists)
	 * 
	 * @param HxClass $hxClass
	 * 
	 * @return string
	 */
	static public function getHaxeName ($hxClass) {
		$__hx__switch = ($hxClass->phpClassName);
		if ($__hx__switch === "Bool") {
			return "Bool";
		} else if ($__hx__switch === "Class") {
			return "Class";
		} else if ($__hx__switch === "Dynamic") {
			return "Dynamic";
		} else if ($__hx__switch === "Enum") {
			return "Enum";
		} else if ($__hx__switch === "Float") {
			return "Float";
		} else if ($__hx__switch === "Int") {
			return "Int";
		} else if ($__hx__switch === "String") {
			return "String";
		} else {
		}
		if (isset(Boot::$aliases[$hxClass->phpClassName])) {
			return Boot::$aliases[$hxClass->phpClassName];
		} else if (class_exists($hxClass->phpClassName) && isset(Boot::$aliases[$hxClass->phpClassName])) {
			return Boot::$aliases[$hxClass->phpClassName];
		} else if (interface_exists($hxClass->phpClassName) && isset(Boot::$aliases[$hxClass->phpClassName])) {
			return Boot::$aliases[$hxClass->phpClassName];
		}
		return null;
	}

	/**
	 * Returns Class<HxAnon>
	 * 
	 * @return HxClass
	 */
	static public function getHxAnon () {
		return Boot::getClass(HxAnon::class);
	}

	/**
	 * Returns Class<HxClass>
	 * 
	 * @return HxClass
	 */
	static public function getHxClass () {
		return Boot::getClass(HxClass::class);
	}

	/**
	 * Creates Haxe-compatible closure of an instance method.
	 * @param obj - any object
	 * 
	 * @param object $obj
	 * @param string $methodName
	 * 
	 * @return HxClosure
	 */
	static public function getInstanceClosure ($obj, $methodName) {
		$result = ($obj->__hx_closureCache[$methodName] ?? null);
		if ($result !== null) {
			return $result;
		}
		$result = new HxClosure($obj, $methodName);
		if (!property_exists($obj, "__hx_closureCache")) {
			$this1 = [];
			$obj->__hx_closureCache = $this1;
		}
		$obj->__hx_closureCache[$methodName] = $result;
		return $result;
	}

	/**
	 * Retrieve metadata for specified class
	 * 
	 * @param string $phpClassName
	 * 
	 * @return mixed
	 */
	static public function getMeta ($phpClassName) {
		if (!class_exists($phpClassName)) {
			interface_exists($phpClassName);
		}
		if (isset(Boot::$meta[$phpClassName])) {
			return Boot::$meta[$phpClassName];
		} else {
			return null;
		}
	}

	/**
	 * Find corresponding PHP class name.
	 * Returns `null` if specified class does not exist.
	 * 
	 * @param string $haxeName
	 * 
	 * @return string
	 */
	static public function getPhpName ($haxeName) {
		$prefix = Boot::getPrefix();
		$phpParts = (strlen($prefix) === 0 ? new Array_hx() : Array_hx::wrap([$prefix]));
		$haxeParts = HxString::split($haxeName, ".");
		$_g = 0;
		while ($_g < $haxeParts->length) {
			$part = ($haxeParts->arr[$_g] ?? null);
			++$_g;
			$__hx__switch = (mb_strtolower($part));
			if ($__hx__switch === "__class__" || $__hx__switch === "__dir__" || $__hx__switch === "__file__" || $__hx__switch === "__function__" || $__hx__switch === "__halt_compiler" || $__hx__switch === "__line__" || $__hx__switch === "__method__" || $__hx__switch === "__namespace__" || $__hx__switch === "__trait__" || $__hx__switch === "abstract" || $__hx__switch === "and" || $__hx__switch === "array" || $__hx__switch === "as" || $__hx__switch === "bool" || $__hx__switch === "break" || $__hx__switch === "callable" || $__hx__switch === "case" || $__hx__switch === "catch" || $__hx__switch === "class" || $__hx__switch === "clone" || $__hx__switch === "const" || $__hx__switch === "continue" || $__hx__switch === "declare" || $__hx__switch === "default" || $__hx__switch === "die" || $__hx__switch === "do" || $__hx__switch === "echo" || $__hx__switch === "else" || $__hx__switch === "elseif" || $__hx__switch === "empty" || $__hx__switch === "enddeclare" || $__hx__switch === "endfor" || $__hx__switch === "endforeach" || $__hx__switch === "endif" || $__hx__switch === "endswitch" || $__hx__switch === "endwhile" || $__hx__switch === "eval" || $__hx__switch === "exit" || $__hx__switch === "extends" || $__hx__switch === "false" || $__hx__switch === "final" || $__hx__switch === "finally" || $__hx__switch === "float" || $__hx__switch === "for" || $__hx__switch === "foreach" || $__hx__switch === "function" || $__hx__switch === "global" || $__hx__switch === "goto" || $__hx__switch === "if" || $__hx__switch === "implements" || $__hx__switch === "include" || $__hx__switch === "include_once" || $__hx__switch === "instanceof" || $__hx__switch === "insteadof" || $__hx__switch === "int" || $__hx__switch === "interface" || $__hx__switch === "isset" || $__hx__switch === "iterable" || $__hx__switch === "list" || $__hx__switch === "namespace" || $__hx__switch === "new" || $__hx__switch === "null" || $__hx__switch === "object" || $__hx__switch === "or" || $__hx__switch === "parent" || $__hx__switch === "print" || $__hx__switch === "private" || $__hx__switch === "protected" || $__hx__switch === "public" || $__hx__switch === "require" || $__hx__switch === "require_once" || $__hx__switch === "return" || $__hx__switch === "static" || $__hx__switch === "string" || $__hx__switch === "switch" || $__hx__switch === "throw" || $__hx__switch === "trait" || $__hx__switch === "true" || $__hx__switch === "try" || $__hx__switch === "unset" || $__hx__switch === "use" || $__hx__switch === "var" || $__hx__switch === "void" || $__hx__switch === "while" || $__hx__switch === "xor" || $__hx__switch === "yield") {
				$part = $part . "_hx";
			} else {
			}
			$phpParts->arr[$phpParts->length] = $part;
			++$phpParts->length;

		}

		return $phpParts->join("\\");
	}

	/**
	 * Returns root namespace based on a value of `-D php-prefix=value` compiler flag.
	 * Returns empty string if no `-D php-prefix=value` provided.
	 * 
	 * @return string
	 */
	static public function getPrefix () {
		return self::PHP_PREFIX;
	}

	/**
	 * Returns a list of phpName=>haxeName for currently loaded haxe-generated classes.
	 * 
	 * @return mixed
	 */
	static public function getRegisteredAliases () {
		return Boot::$aliases;
	}

	/**
	 * Returns a list of currently loaded haxe-generated classes.
	 * 
	 * @return Array_hx
	 */
	static public function getRegisteredClasses () {
		$result = new Array_hx();
		$collection = Boot::$aliases;
		foreach ($collection as $key => $value) {
			$x = Boot::getClass($key);
			$result->arr[$result->length] = $x;
			++$result->length;

		}

		return $result;
	}

	/**
	 * Creates Haxe-compatible closure of a static method.
	 * 
	 * @param string $phpClassName
	 * @param string $methodName
	 * 
	 * @return HxClosure
	 */
	static public function getStaticClosure ($phpClassName, $methodName) {
		$result = (Boot::$staticClosures[$phpClassName][$methodName] ?? null);
		if ($result !== null) {
			return $result;
		}
		$result = new HxClosure($phpClassName, $methodName);
		if (!array_key_exists($phpClassName, Boot::$staticClosures)) {
			$this1 = [];
			Boot::$staticClosures[$phpClassName] = $this1;
		}
		Boot::$staticClosures[$phpClassName][$methodName] = $result;
		return $result;
	}

	/**
	 * Check if specified property has getter
	 * 
	 * @param string $phpClassName
	 * @param string $property
	 * 
	 * @return bool
	 */
	static public function hasGetter ($phpClassName, $property) {
		if (!class_exists($phpClassName)) {
			interface_exists($phpClassName);
		}
		$has = false;
		$phpClassName1 = $phpClassName;
		while (true) {
			$has = isset(Boot::$getters[$phpClassName1][$property]);
			$phpClassName1 = get_parent_class($phpClassName1);
			if (!(!$has && ($phpClassName1 !== false) && class_exists($phpClassName1))) {
				break;
			}
		}
		return $has;
	}

	/**
	 * Check if specified property has setter
	 * 
	 * @param string $phpClassName
	 * @param string $property
	 * 
	 * @return bool
	 */
	static public function hasSetter ($phpClassName, $property) {
		if (!class_exists($phpClassName)) {
			interface_exists($phpClassName);
		}
		$has = false;
		$phpClassName1 = $phpClassName;
		while (true) {
			$has = isset(Boot::$setters[$phpClassName1][$property]);
			$phpClassName1 = get_parent_class($phpClassName1);
			if (!(!$has && ($phpClassName1 !== false) && class_exists($phpClassName1))) {
				break;
			}
		}
		return $has;
	}

	/**
	 * `Std.is()` implementation
	 * 
	 * @param mixed $value
	 * @param HxClass $type
	 * 
	 * @return bool
	 */
	static public function is ($value, $type) {
		if ($type === null) {
			return false;
		}
		$phpType = $type->phpClassName;
		if ($phpType === "Bool") {
			return is_bool($value);
		} else if ($phpType === "Dynamic") {
			return $value !== null;
		} else if ($phpType === "Class" || $phpType === "Enum") {
			if (($value instanceof HxClass)) {
				$valuePhpClass = $value->phpClassName;
				$enumPhpClass = Boot::getClass(HxEnum::class)->phpClassName;
				$isEnumType = is_subclass_of($valuePhpClass, $enumPhpClass);
				if ($phpType === "Enum") {
					return $isEnumType;
				} else {
					return !$isEnumType;
				}
			}
		} else if ($phpType === "Float") {
			if (!is_float($value)) {
				return is_int($value);
			} else {
				return true;
			}
		} else if ($phpType === "Int") {
			if (is_int($value) || (is_float($value) && ((int)($value) == $value) && !is_nan($value))) {
				return abs($value) <= 2147483648;
			} else {
				return false;
			}
		} else if ($phpType === "String") {
			return is_string($value);
		} else if ($phpType === "php\\NativeArray" || $phpType === "php\\_NativeArray\\NativeArray_Impl_") {
			return is_array($value);
		} else {
			if (is_object($value)) {
				$type1 = $type;
				$tmp = $value;
				$tmp1 = $type1;
				return ($tmp instanceof $tmp1->phpClassName);
			}
		}
		return false;
	}

	/**
	 * Check if provided value is an anonymous object
	 * 
	 * @param mixed $v
	 * 
	 * @return bool
	 */
	static public function isAnon ($v) {
		return ($v instanceof HxAnon);
	}

	/**
	 * Check if `value` is a `Class<T>`
	 * 
	 * @param mixed $value
	 * 
	 * @return bool
	 */
	static public function isClass ($value) {
		return ($value instanceof HxClass);
	}

	/**
	 * Check if `value` is an enum constructor instance
	 * 
	 * @param mixed $value
	 * 
	 * @return bool
	 */
	static public function isEnumValue ($value) {
		return ($value instanceof HxEnum);
	}

	/**
	 * Check if `value` is a function
	 * 
	 * @param mixed $value
	 * 
	 * @return bool
	 */
	static public function isFunction ($value) {
		if (!($value instanceof \Closure)) {
			return ($value instanceof HxClosure);
		} else {
			return true;
		}
	}

	/**
	 * Check if `value` is an instance of `HxClosure`
	 * 
	 * @param mixed $value
	 * 
	 * @return bool
	 */
	static public function isHxClosure ($value) {
		return ($value instanceof HxClosure);
	}

	/**
	 * @param mixed $value
	 * 
	 * @return bool
	 */
	static public function isNumber ($value) {
		if (!is_int($value)) {
			return is_float($value);
		} else {
			return true;
		}
	}

	/**
	 * Associate PHP class name with Haxe class name
	 * 
	 * @param string $phpClassName
	 * @param string $haxeClassName
	 * 
	 * @return void
	 */
	static public function registerClass ($phpClassName, $haxeClassName) {
		Boot::$aliases[$phpClassName] = $haxeClassName;
	}

	/**
	 * Register list of getters to be able to call getters using reflection
	 * 
	 * @param string $phpClassName
	 * @param mixed $list
	 * 
	 * @return void
	 */
	static public function registerGetters ($phpClassName, $list) {
		Boot::$getters[$phpClassName] = $list;
	}

	/**
	 * Save metadata for specified class
	 * 
	 * @param string $phpClassName
	 * @param mixed $data
	 * 
	 * @return void
	 */
	static public function registerMeta ($phpClassName, $data) {
		Boot::$meta[$phpClassName] = $data;
	}

	/**
	 * Register list of setters to be able to call getters using reflection
	 * 
	 * @param string $phpClassName
	 * @param mixed $list
	 * 
	 * @return void
	 */
	static public function registerSetters ($phpClassName, $list) {
		Boot::$setters[$phpClassName] = $list;
	}

	/**
	 * Performs `left >>> right` operation
	 * 
	 * @param int $left
	 * @param int $right
	 * 
	 * @return int
	 */
	static public function shiftRightUnsigned ($left, $right) {
		if ($right === 0) {
			return $left;
		} else if ($left >= 0) {
			return ($left >> $right) & ~((1 << (8 * PHP_INT_SIZE - 1)) >> ($right - 1));
		} else {
			return ($left >> $right) & (2147483647 >> ($right - 1));
		}
	}

	/**
	 * Returns string representation of `value`
	 * 
	 * @param mixed $value
	 * @param int $maxRecursion
	 * 
	 * @return string
	 */
	static public function stringify ($value, $maxRecursion = 10) {
		if ($maxRecursion === null) {
			$maxRecursion = 10;
		}
		if ($maxRecursion <= 0) {
			return "<...>";
		}
		if ($value === null) {
			return "null";
		}
		if (is_string($value)) {
			return $value;
		}
		if (is_int($value) || is_float($value)) {
			return (string)($value);
		}
		if (is_bool($value)) {
			if ($value) {
				return "true";
			} else {
				return "false";
			}
		}
		if (is_array($value)) {
			$strings = [];
			$collection = $value;
			foreach ($collection as $key => $value1) {
				$strings[] = (((string)($key)??'null') . " => " . (Boot::stringify($value1, $maxRecursion - 1)??'null'));
			}

			return "[" . (implode(", ", $strings)??'null') . "]";
		}
		if (is_object($value)) {
			if (($value instanceof Array_hx)) {
				return Boot::stringifyNativeIndexedArray(Boot::dynamicField($value, 'arr'), $maxRecursion - 1);
			}
			if (method_exists($value, "toString")) {
				return HxDynamicStr::wrap($value)->toString();
			}
			if (method_exists($value, "__toString")) {
				return $value->__toString();
			}
			if (($value instanceof \StdClass)) {
				$tmp = $value;
				if (isset($tmp->{"toString"}) && is_callable(Boot::dynamicField($value, 'toString'))) {
					return HxDynamicStr::wrap($value)->toString();
				}
				$this1 = [];
				$result = $this1;
				$data = get_object_vars($value);
				$data1 = array_keys($data);
				$_g_current = 0;
				$_g_length = count($data1);
				$_g_data = $data1;
				while ($_g_current < $_g_length) {
					$key1 = $_g_data[$_g_current++];
					$tmp1 = "" . $key1 . " : " . (Boot::stringify($data[$key1], $maxRecursion - 1)??'null');
					array_push($result, $tmp1);
				}

				return "{ " . (implode(", ", $result)??'null') . " }";
			}
			if (($value instanceof \Closure) || ($value instanceof HxClosure)) {
				return "<function>";
			}
			if (($value instanceof HxClass)) {
				return "[class " . (Boot::getClassName($value->phpClassName)??'null') . "]";
			} else {
				return "[object " . (Boot::getClassName(get_class($value))??'null') . "]";
			}
		}
		throw new HxException("Unable to stringify value");
	}

	/**
	 * @param mixed $arr
	 * @param int $maxRecursion
	 * 
	 * @return string
	 */
	static public function stringifyNativeIndexedArray ($arr, $maxRecursion = 10) {
		if ($maxRecursion === null) {
			$maxRecursion = 10;
		}
		$strings = [];
		foreach ($arr as $key => $value) {
			$strings[$key] = Boot::stringify($value, $maxRecursion - 1);
		}
		return "[" . (implode(",", $strings)??'null') . "]";
	}

	/**
	 * Implementation for `cast(value, Class<Dynamic>)`
	 * @throws HxException if `value` cannot be casted to this type
	 * 
	 * @param HxClass $hxClass
	 * @param mixed $value
	 * 
	 * @return mixed
	 */
	static public function typedCast ($hxClass, $value) {
		if ($value === null) {
			return null;
		}
		$__hx__switch = ($hxClass->phpClassName);
		if ($__hx__switch === "Bool") {
			if (is_bool($value)) {
				return $value;
			}
		} else if ($__hx__switch === "Float") {
			if (is_int($value) || is_float($value)) {
				return floatval($value);
			}
		} else if ($__hx__switch === "Int") {
			if (is_int($value) || is_float($value)) {
				return intval($value);
			}
		} else if ($__hx__switch === "String") {
			if (is_string($value)) {
				return $value;
			}
		} else if ($__hx__switch === "php\\NativeArray") {
			if (is_array($value)) {
				return $value;
			}
		} else {
			if (is_object($value) && Boot::is($value, $hxClass)) {
				return $value;
			}
		}
		throw new HxException("Cannot cast " . (Std::string($value)??'null') . " to " . (Boot::getClassName($hxClass->phpClassName)??'null'));
	}

	/**
	 * Get UTF-8 code of che first character in `s` without any checks
	 * 
	 * @param mixed $s
	 * 
	 * @return int
	 */
	static public function unsafeOrd ($s) {
		$code = ord($s[0]);
		if ($code < 192) {
			return $code;
		} else if ($code < 224) {
			return (($code - 192) << 6) + ord($s[1]) - 128;
		} else if ($code < 240) {
			return (($code - 224) << 12) + ((ord($s[1]) - 128) << 6) + ord($s[2]) - 128;
		} else {
			return (($code - 240) << 18) + ((ord($s[1]) - 128) << 12) + ((ord($s[2]) - 128) << 6) + ord($s[3]) - 128;
		}
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;

		mb_internal_encoding("UTF-8");
		if (!defined("HAXE_CUSTOM_ERROR_HANDLER") || !HAXE_CUSTOM_ERROR_HANDLER) {
			$previousLevel = error_reporting(E_ALL);
			$previousHandler = set_error_handler(function ($errno, $errstr, $errfile, $errline) {
				if ((error_reporting() & $errno) === 0) {
					return false;
				}
				if (($errno === E_WARNING) && ($errstr === "Division by zero")) {
					return true;
				}
				throw new \ErrorException($errstr, 0, $errno, $errfile, $errline);
			});
			if ($previousHandler !== null) {
				error_reporting($previousLevel);
				set_error_handler($previousHandler);
			}
		}

		$this1 = [];
		self::$aliases = $this1;
		$this1 = [];
		self::$classes = $this1;
		$this1 = [];
		self::$getters = $this1;
		$this1 = [];
		self::$setters = $this1;
		$this1 = [];
		self::$meta = $this1;
		$this1 = [];
		self::$staticClosures = $this1;
	}
}

require_once __DIR__.'/_polyfills.php';
Boot::__hx__init();
